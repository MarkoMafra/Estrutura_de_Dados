{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MarkoMafra/Estrutura_de_Dados/blob/main/meu%20estudo%20pyhton%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#importação das bibliotecas\n"
      ],
      "metadata": {
        "id": "zu25cGsnj5ai"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#importação das bibliotecas\n",
        "import pandas as pd #leitura da base de dados\n",
        "import matplotlib.pyplot as plt # criar gráficos estáticos\n",
        "import numpy as np # linear algebra\n",
        "import seaborn as sns # criar gráficos estáticos\n",
        "import plotly.express as px #criar gráficos estáticos e dinâmicos\n",
        "import warnings #ignorar warnings na construção de gráficos\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "id": "C8l1sE30kINo"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('/content/winequality-white.csv',sep=';',header=0)\n",
        "df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "VPjcbzKtkRY6",
        "outputId": "99b074da-f9ba-4df8-9c4a-d561df4c2f0d"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0               7.0              0.27         0.36            20.7      0.045   \n",
              "1               6.3              0.30         0.34             1.6      0.049   \n",
              "2               8.1              0.28         0.40             6.9      0.050   \n",
              "3               7.2              0.23         0.32             8.5      0.058   \n",
              "4               7.2              0.23         0.32             8.5      0.058   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "4893            6.2              0.21         0.29             1.6      0.039   \n",
              "4894            6.6              0.32         0.36             8.0      0.047   \n",
              "4895            6.5              0.24         0.19             1.2      0.041   \n",
              "4896            5.5              0.29         0.30             1.1      0.022   \n",
              "4897            6.0              0.21         0.38             0.8      0.020   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                    45.0                 170.0  1.00100  3.00       0.45   \n",
              "1                    14.0                 132.0  0.99400  3.30       0.49   \n",
              "2                    30.0                  97.0  0.99510  3.26       0.44   \n",
              "3                    47.0                 186.0  0.99560  3.19       0.40   \n",
              "4                    47.0                 186.0  0.99560  3.19       0.40   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "4893                 24.0                  92.0  0.99114  3.27       0.50   \n",
              "4894                 57.0                 168.0  0.99490  3.15       0.46   \n",
              "4895                 30.0                 111.0  0.99254  2.99       0.46   \n",
              "4896                 20.0                 110.0  0.98869  3.34       0.38   \n",
              "4897                 22.0                  98.0  0.98941  3.26       0.32   \n",
              "\n",
              "      alcohol  quality  \n",
              "0         8.8        6  \n",
              "1         9.5        6  \n",
              "2        10.1        6  \n",
              "3         9.9        6  \n",
              "4         9.9        6  \n",
              "...       ...      ...  \n",
              "4893     11.2        6  \n",
              "4894      9.6        5  \n",
              "4895      9.4        6  \n",
              "4896     12.8        7  \n",
              "4897     11.8        6  \n",
              "\n",
              "[4898 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6977835f-a614-4761-b41c-91b9d942f806\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.0</td>\n",
              "      <td>0.27</td>\n",
              "      <td>0.36</td>\n",
              "      <td>20.7</td>\n",
              "      <td>0.045</td>\n",
              "      <td>45.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>1.00100</td>\n",
              "      <td>3.00</td>\n",
              "      <td>0.45</td>\n",
              "      <td>8.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0.30</td>\n",
              "      <td>0.34</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.049</td>\n",
              "      <td>14.0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0.99400</td>\n",
              "      <td>3.30</td>\n",
              "      <td>0.49</td>\n",
              "      <td>9.5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8.1</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.40</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.050</td>\n",
              "      <td>30.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.99510</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.44</td>\n",
              "      <td>10.1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.32</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.058</td>\n",
              "      <td>47.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>0.99560</td>\n",
              "      <td>3.19</td>\n",
              "      <td>0.40</td>\n",
              "      <td>9.9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.32</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.058</td>\n",
              "      <td>47.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>0.99560</td>\n",
              "      <td>3.19</td>\n",
              "      <td>0.40</td>\n",
              "      <td>9.9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4893</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.29</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.039</td>\n",
              "      <td>24.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>0.99114</td>\n",
              "      <td>3.27</td>\n",
              "      <td>0.50</td>\n",
              "      <td>11.2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4894</th>\n",
              "      <td>6.6</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.36</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.047</td>\n",
              "      <td>57.0</td>\n",
              "      <td>168.0</td>\n",
              "      <td>0.99490</td>\n",
              "      <td>3.15</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.6</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4895</th>\n",
              "      <td>6.5</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.19</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.041</td>\n",
              "      <td>30.0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0.99254</td>\n",
              "      <td>2.99</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.4</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4896</th>\n",
              "      <td>5.5</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.022</td>\n",
              "      <td>20.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.98869</td>\n",
              "      <td>3.34</td>\n",
              "      <td>0.38</td>\n",
              "      <td>12.8</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4897</th>\n",
              "      <td>6.0</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.020</td>\n",
              "      <td>22.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>0.98941</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.32</td>\n",
              "      <td>11.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4898 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6977835f-a614-4761-b41c-91b9d942f806')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6977835f-a614-4761-b41c-91b9d942f806 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6977835f-a614-4761-b41c-91b9d942f806');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-097e59a9-cc86-4647-8551-71ed0489aaa2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-097e59a9-cc86-4647-8551-71ed0489aaa2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-097e59a9-cc86-4647-8551-71ed0489aaa2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0cd21141-3a0d-4a7b-a71c-14499476a351\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0cd21141-3a0d-4a7b-a71c-14499476a351 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4898,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8438682276875188,\n        \"min\": 3.8,\n        \"max\": 14.2,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          10.3,\n          5.8,\n          6.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10079454842486428,\n        \"min\": 0.08,\n        \"max\": 1.1,\n        \"num_unique_values\": 125,\n        \"samples\": [\n          0.14,\n          0.595,\n          0.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12101980420298301,\n        \"min\": 0.0,\n        \"max\": 1.66,\n        \"num_unique_values\": 87,\n        \"samples\": [\n          0.64,\n          0.36,\n          0.24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.072057784014864,\n        \"min\": 0.6,\n        \"max\": 65.8,\n        \"num_unique_values\": 310,\n        \"samples\": [\n          15.5,\n          19.25,\n          3.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02184796809372882,\n        \"min\": 0.009,\n        \"max\": 0.346,\n        \"num_unique_values\": 160,\n        \"samples\": [\n          0.167,\n          0.133,\n          0.015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.007137325232566,\n        \"min\": 2.0,\n        \"max\": 289.0,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          24.0,\n          122.5,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42.49806455414294,\n        \"min\": 9.0,\n        \"max\": 440.0,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          260.0,\n          63.0,\n          70.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0029909069169369354,\n        \"min\": 0.98711,\n        \"max\": 1.03898,\n        \"num_unique_values\": 890,\n        \"samples\": [\n          0.99362,\n          0.99388,\n          0.9929\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1510005996150667,\n        \"min\": 2.72,\n        \"max\": 3.82,\n        \"num_unique_values\": 103,\n        \"samples\": [\n          3.34,\n          3.41,\n          3.49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11412583394883138,\n        \"min\": 0.22,\n        \"max\": 1.08,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          0.41,\n          0.45,\n          0.46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2306205677573183,\n        \"min\": 8.0,\n        \"max\": 14.2,\n        \"num_unique_values\": 103,\n        \"samples\": [\n          12.6,\n          11.3666666666667,\n          10.0333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 9,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head() #apresenta as cinco primeiras linhas do dataframe\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "J9UVCrohkU6T",
        "outputId": "5ce28386-8b86-4023-d2fb-73369eb9316e"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0            7.0              0.27         0.36            20.7      0.045   \n",
              "1            6.3              0.30         0.34             1.6      0.049   \n",
              "2            8.1              0.28         0.40             6.9      0.050   \n",
              "3            7.2              0.23         0.32             8.5      0.058   \n",
              "4            7.2              0.23         0.32             8.5      0.058   \n",
              "\n",
              "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                 45.0                 170.0   1.0010  3.00       0.45   \n",
              "1                 14.0                 132.0   0.9940  3.30       0.49   \n",
              "2                 30.0                  97.0   0.9951  3.26       0.44   \n",
              "3                 47.0                 186.0   0.9956  3.19       0.40   \n",
              "4                 47.0                 186.0   0.9956  3.19       0.40   \n",
              "\n",
              "   alcohol  quality  \n",
              "0      8.8        6  \n",
              "1      9.5        6  \n",
              "2     10.1        6  \n",
              "3      9.9        6  \n",
              "4      9.9        6  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b4ddc442-3e09-486f-9942-032a58fdaa65\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.0</td>\n",
              "      <td>0.27</td>\n",
              "      <td>0.36</td>\n",
              "      <td>20.7</td>\n",
              "      <td>0.045</td>\n",
              "      <td>45.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>1.0010</td>\n",
              "      <td>3.00</td>\n",
              "      <td>0.45</td>\n",
              "      <td>8.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0.30</td>\n",
              "      <td>0.34</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.049</td>\n",
              "      <td>14.0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0.9940</td>\n",
              "      <td>3.30</td>\n",
              "      <td>0.49</td>\n",
              "      <td>9.5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8.1</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.40</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.050</td>\n",
              "      <td>30.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.9951</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.44</td>\n",
              "      <td>10.1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.32</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.058</td>\n",
              "      <td>47.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>0.9956</td>\n",
              "      <td>3.19</td>\n",
              "      <td>0.40</td>\n",
              "      <td>9.9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.32</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.058</td>\n",
              "      <td>47.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>0.9956</td>\n",
              "      <td>3.19</td>\n",
              "      <td>0.40</td>\n",
              "      <td>9.9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4ddc442-3e09-486f-9942-032a58fdaa65')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b4ddc442-3e09-486f-9942-032a58fdaa65 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b4ddc442-3e09-486f-9942-032a58fdaa65');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3e6b955b-3112-4211-8d6c-18534087e2ee\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3e6b955b-3112-4211-8d6c-18534087e2ee')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3e6b955b-3112-4211-8d6c-18534087e2ee button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4898,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8438682276875188,\n        \"min\": 3.8,\n        \"max\": 14.2,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          10.3,\n          5.8,\n          6.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10079454842486428,\n        \"min\": 0.08,\n        \"max\": 1.1,\n        \"num_unique_values\": 125,\n        \"samples\": [\n          0.14,\n          0.595,\n          0.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12101980420298301,\n        \"min\": 0.0,\n        \"max\": 1.66,\n        \"num_unique_values\": 87,\n        \"samples\": [\n          0.64,\n          0.36,\n          0.24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.072057784014864,\n        \"min\": 0.6,\n        \"max\": 65.8,\n        \"num_unique_values\": 310,\n        \"samples\": [\n          15.5,\n          19.25,\n          3.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02184796809372882,\n        \"min\": 0.009,\n        \"max\": 0.346,\n        \"num_unique_values\": 160,\n        \"samples\": [\n          0.167,\n          0.133,\n          0.015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.007137325232566,\n        \"min\": 2.0,\n        \"max\": 289.0,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          24.0,\n          122.5,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42.49806455414294,\n        \"min\": 9.0,\n        \"max\": 440.0,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          260.0,\n          63.0,\n          70.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0029909069169369354,\n        \"min\": 0.98711,\n        \"max\": 1.03898,\n        \"num_unique_values\": 890,\n        \"samples\": [\n          0.99362,\n          0.99388,\n          0.9929\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1510005996150667,\n        \"min\": 2.72,\n        \"max\": 3.82,\n        \"num_unique_values\": 103,\n        \"samples\": [\n          3.34,\n          3.41,\n          3.49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11412583394883138,\n        \"min\": 0.22,\n        \"max\": 1.08,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          0.41,\n          0.45,\n          0.46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2306205677573183,\n        \"min\": 8.0,\n        \"max\": 14.2,\n        \"num_unique_values\": 103,\n        \"samples\": [\n          12.6,\n          11.3666666666667,\n          10.0333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 9,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail() #apresenta as cinco últimas linhas do dataframe\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "XuzDfyMSkU3i",
        "outputId": "eeebc8ce-a3ec-4f2f-c6e3-bf2768ec0707"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "4893            6.2              0.21         0.29             1.6      0.039   \n",
              "4894            6.6              0.32         0.36             8.0      0.047   \n",
              "4895            6.5              0.24         0.19             1.2      0.041   \n",
              "4896            5.5              0.29         0.30             1.1      0.022   \n",
              "4897            6.0              0.21         0.38             0.8      0.020   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "4893                 24.0                  92.0  0.99114  3.27       0.50   \n",
              "4894                 57.0                 168.0  0.99490  3.15       0.46   \n",
              "4895                 30.0                 111.0  0.99254  2.99       0.46   \n",
              "4896                 20.0                 110.0  0.98869  3.34       0.38   \n",
              "4897                 22.0                  98.0  0.98941  3.26       0.32   \n",
              "\n",
              "      alcohol  quality  \n",
              "4893     11.2        6  \n",
              "4894      9.6        5  \n",
              "4895      9.4        6  \n",
              "4896     12.8        7  \n",
              "4897     11.8        6  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0a5d825-7bb3-48b4-a9ed-de33845faa64\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4893</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.29</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.039</td>\n",
              "      <td>24.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>0.99114</td>\n",
              "      <td>3.27</td>\n",
              "      <td>0.50</td>\n",
              "      <td>11.2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4894</th>\n",
              "      <td>6.6</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.36</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.047</td>\n",
              "      <td>57.0</td>\n",
              "      <td>168.0</td>\n",
              "      <td>0.99490</td>\n",
              "      <td>3.15</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.6</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4895</th>\n",
              "      <td>6.5</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.19</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.041</td>\n",
              "      <td>30.0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0.99254</td>\n",
              "      <td>2.99</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.4</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4896</th>\n",
              "      <td>5.5</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.022</td>\n",
              "      <td>20.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.98869</td>\n",
              "      <td>3.34</td>\n",
              "      <td>0.38</td>\n",
              "      <td>12.8</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4897</th>\n",
              "      <td>6.0</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.020</td>\n",
              "      <td>22.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>0.98941</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.32</td>\n",
              "      <td>11.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0a5d825-7bb3-48b4-a9ed-de33845faa64')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f0a5d825-7bb3-48b4-a9ed-de33845faa64 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f0a5d825-7bb3-48b4-a9ed-de33845faa64');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-33421a78-47c3-4643-a25d-e18317c81378\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-33421a78-47c3-4643-a25d-e18317c81378')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-33421a78-47c3-4643-a25d-e18317c81378 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43931765272977585,\n        \"min\": 5.5,\n        \"max\": 6.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.6,\n          6.0,\n          6.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04929503017546495,\n        \"min\": 0.21,\n        \"max\": 0.32,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.32,\n          0.29,\n          0.21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07436396977031282,\n        \"min\": 0.19,\n        \"max\": 0.38,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.36,\n          0.38,\n          0.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0656157619636546,\n        \"min\": 0.8,\n        \"max\": 8.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.0,\n          0.8,\n          1.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.012070625501605127,\n        \"min\": 0.02,\n        \"max\": 0.047,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.047,\n          0.02,\n          0.041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.224979474534605,\n        \"min\": 20.0,\n        \"max\": 57.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          57.0,\n          22.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.26879581351065,\n        \"min\": 92.0,\n        \"max\": 168.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          168.0,\n          98.0,\n          111.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.002495041081826117,\n        \"min\": 0.98869,\n        \"max\": 0.9949,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9949,\n          0.98941,\n          0.99254\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1366382084191679,\n        \"min\": 2.99,\n        \"max\": 3.34,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.15,\n          3.26,\n          2.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0726636084983398,\n        \"min\": 0.32,\n        \"max\": 0.5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.46,\n          0.32,\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.451895313030523,\n        \"min\": 9.4,\n        \"max\": 12.8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          9.6,\n          11.8,\n          9.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 5,\n        \"max\": 7,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          6,\n          5,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape #apresenta a quantidade de linhas e colunas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m0-YC-OGkU1K",
        "outputId": "cac6ce57-0229-40ba-fa0c-ef1eac119562"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4898, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info() #apresenta as informações\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5w8VuCROkUyq",
        "outputId": "da4fa89f-a6ab-4eff-cad8-f2c15f82d2d8"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4898 entries, 0 to 4897\n",
            "Data columns (total 12 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   fixed acidity         4898 non-null   float64\n",
            " 1   volatile acidity      4898 non-null   float64\n",
            " 2   citric acid           4898 non-null   float64\n",
            " 3   residual sugar        4898 non-null   float64\n",
            " 4   chlorides             4898 non-null   float64\n",
            " 5   free sulfur dioxide   4898 non-null   float64\n",
            " 6   total sulfur dioxide  4898 non-null   float64\n",
            " 7   density               4898 non-null   float64\n",
            " 8   pH                    4898 non-null   float64\n",
            " 9   sulphates             4898 non-null   float64\n",
            " 10  alcohol               4898 non-null   float64\n",
            " 11  quality               4898 non-null   int64  \n",
            "dtypes: float64(11), int64(1)\n",
            "memory usage: 459.3 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns #apresenta os nomes das colunas do dataframe\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qSUVbcI0kUwC",
        "outputId": "8aa55c0a-6661-4511-ea60-6d3b48049f68"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n",
              "       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n",
              "       'pH', 'sulphates', 'alcohol', 'quality'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#acidez fixa #acidez volátil #ácido cítrico #açúcar residual #cloretos #dióxido de enxofre livre #dióxido de enxofre total #densidade #pH #sulfatos #álcool #qualidade\n",
        "#pH<7 ácido ph=7 neutro ph>7 alcalino"
      ],
      "metadata": {
        "id": "XqzFT_P4kUtj"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.count() #apresenta a quantidade de dados não nulos em cada coluna\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "stn1r5aRkUrC",
        "outputId": "3eb85eaa-bc1c-4a8d-c66a-7eeaf18fd56a"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "fixed acidity           4898\n",
              "volatile acidity        4898\n",
              "citric acid             4898\n",
              "residual sugar          4898\n",
              "chlorides               4898\n",
              "free sulfur dioxide     4898\n",
              "total sulfur dioxide    4898\n",
              "density                 4898\n",
              "pH                      4898\n",
              "sulphates               4898\n",
              "alcohol                 4898\n",
              "quality                 4898\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>fixed acidity</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>volatile acidity</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>citric acid</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>residual sugar</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chlorides</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>density</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pH</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sulphates</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alcohol</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>quality</th>\n",
              "      <td>4898</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe() #apresenta as medidas estatísticas das colunas numéricas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "50tAti_7kUoi",
        "outputId": "7845a4ec-365d-47f5-bc8e-847fb9d754e7"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       fixed acidity  volatile acidity  citric acid  residual sugar  \\\n",
              "count    4898.000000       4898.000000  4898.000000     4898.000000   \n",
              "mean        6.854788          0.278241     0.334192        6.391415   \n",
              "std         0.843868          0.100795     0.121020        5.072058   \n",
              "min         3.800000          0.080000     0.000000        0.600000   \n",
              "25%         6.300000          0.210000     0.270000        1.700000   \n",
              "50%         6.800000          0.260000     0.320000        5.200000   \n",
              "75%         7.300000          0.320000     0.390000        9.900000   \n",
              "max        14.200000          1.100000     1.660000       65.800000   \n",
              "\n",
              "         chlorides  free sulfur dioxide  total sulfur dioxide      density  \\\n",
              "count  4898.000000          4898.000000           4898.000000  4898.000000   \n",
              "mean      0.045772            35.308085            138.360657     0.994027   \n",
              "std       0.021848            17.007137             42.498065     0.002991   \n",
              "min       0.009000             2.000000              9.000000     0.987110   \n",
              "25%       0.036000            23.000000            108.000000     0.991723   \n",
              "50%       0.043000            34.000000            134.000000     0.993740   \n",
              "75%       0.050000            46.000000            167.000000     0.996100   \n",
              "max       0.346000           289.000000            440.000000     1.038980   \n",
              "\n",
              "                pH    sulphates      alcohol      quality  \n",
              "count  4898.000000  4898.000000  4898.000000  4898.000000  \n",
              "mean      3.188267     0.489847    10.514267     5.877909  \n",
              "std       0.151001     0.114126     1.230621     0.885639  \n",
              "min       2.720000     0.220000     8.000000     3.000000  \n",
              "25%       3.090000     0.410000     9.500000     5.000000  \n",
              "50%       3.180000     0.470000    10.400000     6.000000  \n",
              "75%       3.280000     0.550000    11.400000     6.000000  \n",
              "max       3.820000     1.080000    14.200000     9.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6ceeaf61-692c-4dfb-806d-8b6dfa0cbf16\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6.854788</td>\n",
              "      <td>0.278241</td>\n",
              "      <td>0.334192</td>\n",
              "      <td>6.391415</td>\n",
              "      <td>0.045772</td>\n",
              "      <td>35.308085</td>\n",
              "      <td>138.360657</td>\n",
              "      <td>0.994027</td>\n",
              "      <td>3.188267</td>\n",
              "      <td>0.489847</td>\n",
              "      <td>10.514267</td>\n",
              "      <td>5.877909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.843868</td>\n",
              "      <td>0.100795</td>\n",
              "      <td>0.121020</td>\n",
              "      <td>5.072058</td>\n",
              "      <td>0.021848</td>\n",
              "      <td>17.007137</td>\n",
              "      <td>42.498065</td>\n",
              "      <td>0.002991</td>\n",
              "      <td>0.151001</td>\n",
              "      <td>0.114126</td>\n",
              "      <td>1.230621</td>\n",
              "      <td>0.885639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>3.800000</td>\n",
              "      <td>0.080000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.009000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.987110</td>\n",
              "      <td>2.720000</td>\n",
              "      <td>0.220000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6.300000</td>\n",
              "      <td>0.210000</td>\n",
              "      <td>0.270000</td>\n",
              "      <td>1.700000</td>\n",
              "      <td>0.036000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>108.000000</td>\n",
              "      <td>0.991723</td>\n",
              "      <td>3.090000</td>\n",
              "      <td>0.410000</td>\n",
              "      <td>9.500000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.800000</td>\n",
              "      <td>0.260000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>5.200000</td>\n",
              "      <td>0.043000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>134.000000</td>\n",
              "      <td>0.993740</td>\n",
              "      <td>3.180000</td>\n",
              "      <td>0.470000</td>\n",
              "      <td>10.400000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.300000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>0.390000</td>\n",
              "      <td>9.900000</td>\n",
              "      <td>0.050000</td>\n",
              "      <td>46.000000</td>\n",
              "      <td>167.000000</td>\n",
              "      <td>0.996100</td>\n",
              "      <td>3.280000</td>\n",
              "      <td>0.550000</td>\n",
              "      <td>11.400000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>14.200000</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>1.660000</td>\n",
              "      <td>65.800000</td>\n",
              "      <td>0.346000</td>\n",
              "      <td>289.000000</td>\n",
              "      <td>440.000000</td>\n",
              "      <td>1.038980</td>\n",
              "      <td>3.820000</td>\n",
              "      <td>1.080000</td>\n",
              "      <td>14.200000</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ceeaf61-692c-4dfb-806d-8b6dfa0cbf16')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6ceeaf61-692c-4dfb-806d-8b6dfa0cbf16 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6ceeaf61-692c-4dfb-806d-8b6dfa0cbf16');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-62184c8d-d99b-45e2-96a2-e02a5a5795ca\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-62184c8d-d99b-45e2-96a2-e02a5a5795ca')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-62184c8d-d99b-45e2-96a2-e02a5a5795ca button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1729.380279601558,\n        \"min\": 0.8438682276875188,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.854787668436097,\n          6.8,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1731.585893012408,\n        \"min\": 0.08,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.27824111882400976,\n          0.26,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1731.5482512784365,\n        \"min\": 0.0,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.33419150673744386,\n          0.32,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1727.0574664550059,\n        \"min\": 0.6,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.391414863209474,\n          5.2,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1731.676649579488,\n        \"min\": 0.009,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.04577235606369946,\n          0.043,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1711.6847487709076,\n        \"min\": 2.0,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          35.30808493262556,\n          34.0,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1684.2445242150275,\n        \"min\": 9.0,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          138.36065741118824,\n          134.0,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1731.401260698138,\n        \"min\": 0.0029909069169369354,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9940273764801959,\n          0.99374,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1730.7235387365738,\n        \"min\": 0.1510005996150667,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.1882666394446715,\n          3.18,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1731.5361396446815,\n        \"min\": 0.11412583394883138,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.48984687627603113,\n          0.47,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1728.4131904079502,\n        \"min\": 1.2306205677573183,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.514267047774602,\n          10.4,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1729.8998109229556,\n        \"min\": 0.8856385749678454,\n        \"max\": 4898.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4898.0,\n          5.87790935075541,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe().T #apresenta as medidas estatísticas das colunas numéricas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "9HxGiE0skUmB",
        "outputId": "fe6763fb-1dfb-46b3-956b-590c788df54e"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       count        mean        std      min         25%  \\\n",
              "fixed acidity         4898.0    6.854788   0.843868  3.80000    6.300000   \n",
              "volatile acidity      4898.0    0.278241   0.100795  0.08000    0.210000   \n",
              "citric acid           4898.0    0.334192   0.121020  0.00000    0.270000   \n",
              "residual sugar        4898.0    6.391415   5.072058  0.60000    1.700000   \n",
              "chlorides             4898.0    0.045772   0.021848  0.00900    0.036000   \n",
              "free sulfur dioxide   4898.0   35.308085  17.007137  2.00000   23.000000   \n",
              "total sulfur dioxide  4898.0  138.360657  42.498065  9.00000  108.000000   \n",
              "density               4898.0    0.994027   0.002991  0.98711    0.991723   \n",
              "pH                    4898.0    3.188267   0.151001  2.72000    3.090000   \n",
              "sulphates             4898.0    0.489847   0.114126  0.22000    0.410000   \n",
              "alcohol               4898.0   10.514267   1.230621  8.00000    9.500000   \n",
              "quality               4898.0    5.877909   0.885639  3.00000    5.000000   \n",
              "\n",
              "                            50%       75%        max  \n",
              "fixed acidity           6.80000    7.3000   14.20000  \n",
              "volatile acidity        0.26000    0.3200    1.10000  \n",
              "citric acid             0.32000    0.3900    1.66000  \n",
              "residual sugar          5.20000    9.9000   65.80000  \n",
              "chlorides               0.04300    0.0500    0.34600  \n",
              "free sulfur dioxide    34.00000   46.0000  289.00000  \n",
              "total sulfur dioxide  134.00000  167.0000  440.00000  \n",
              "density                 0.99374    0.9961    1.03898  \n",
              "pH                      3.18000    3.2800    3.82000  \n",
              "sulphates               0.47000    0.5500    1.08000  \n",
              "alcohol                10.40000   11.4000   14.20000  \n",
              "quality                 6.00000    6.0000    9.00000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ee625596-f200-4694-b5fe-6688ac9337c2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>fixed acidity</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>6.854788</td>\n",
              "      <td>0.843868</td>\n",
              "      <td>3.80000</td>\n",
              "      <td>6.300000</td>\n",
              "      <td>6.80000</td>\n",
              "      <td>7.3000</td>\n",
              "      <td>14.20000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>volatile acidity</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>0.278241</td>\n",
              "      <td>0.100795</td>\n",
              "      <td>0.08000</td>\n",
              "      <td>0.210000</td>\n",
              "      <td>0.26000</td>\n",
              "      <td>0.3200</td>\n",
              "      <td>1.10000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>citric acid</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>0.334192</td>\n",
              "      <td>0.121020</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.270000</td>\n",
              "      <td>0.32000</td>\n",
              "      <td>0.3900</td>\n",
              "      <td>1.66000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>residual sugar</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>6.391415</td>\n",
              "      <td>5.072058</td>\n",
              "      <td>0.60000</td>\n",
              "      <td>1.700000</td>\n",
              "      <td>5.20000</td>\n",
              "      <td>9.9000</td>\n",
              "      <td>65.80000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chlorides</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>0.045772</td>\n",
              "      <td>0.021848</td>\n",
              "      <td>0.00900</td>\n",
              "      <td>0.036000</td>\n",
              "      <td>0.04300</td>\n",
              "      <td>0.0500</td>\n",
              "      <td>0.34600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>35.308085</td>\n",
              "      <td>17.007137</td>\n",
              "      <td>2.00000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>34.00000</td>\n",
              "      <td>46.0000</td>\n",
              "      <td>289.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>138.360657</td>\n",
              "      <td>42.498065</td>\n",
              "      <td>9.00000</td>\n",
              "      <td>108.000000</td>\n",
              "      <td>134.00000</td>\n",
              "      <td>167.0000</td>\n",
              "      <td>440.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>density</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>0.994027</td>\n",
              "      <td>0.002991</td>\n",
              "      <td>0.98711</td>\n",
              "      <td>0.991723</td>\n",
              "      <td>0.99374</td>\n",
              "      <td>0.9961</td>\n",
              "      <td>1.03898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pH</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>3.188267</td>\n",
              "      <td>0.151001</td>\n",
              "      <td>2.72000</td>\n",
              "      <td>3.090000</td>\n",
              "      <td>3.18000</td>\n",
              "      <td>3.2800</td>\n",
              "      <td>3.82000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sulphates</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>0.489847</td>\n",
              "      <td>0.114126</td>\n",
              "      <td>0.22000</td>\n",
              "      <td>0.410000</td>\n",
              "      <td>0.47000</td>\n",
              "      <td>0.5500</td>\n",
              "      <td>1.08000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alcohol</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>10.514267</td>\n",
              "      <td>1.230621</td>\n",
              "      <td>8.00000</td>\n",
              "      <td>9.500000</td>\n",
              "      <td>10.40000</td>\n",
              "      <td>11.4000</td>\n",
              "      <td>14.20000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>quality</th>\n",
              "      <td>4898.0</td>\n",
              "      <td>5.877909</td>\n",
              "      <td>0.885639</td>\n",
              "      <td>3.00000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>6.00000</td>\n",
              "      <td>6.0000</td>\n",
              "      <td>9.00000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee625596-f200-4694-b5fe-6688ac9337c2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ee625596-f200-4694-b5fe-6688ac9337c2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ee625596-f200-4694-b5fe-6688ac9337c2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b2f753c4-53f3-4264-885d-f9d2239d4d20\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b2f753c4-53f3-4264-885d-f9d2239d4d20')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b2f753c4-53f3-4264-885d-f9d2239d4d20 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 4898.0,\n        \"max\": 4898.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39.320811667701335,\n        \"min\": 0.04577235606369946,\n        \"max\": 138.36065741118824,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          10.514267047774602\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.57065571964883,\n        \"min\": 0.0029909069169369354,\n        \"max\": 42.49806455414294,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          1.2306205677573183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0767853382015407,\n        \"min\": 0.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.55237406116316,\n        \"min\": 0.036,\n        \"max\": 108.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          9.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.08102585636194,\n        \"min\": 0.043,\n        \"max\": 134.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          10.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47.66610829424839,\n        \"min\": 0.05,\n        \"max\": 167.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 142.37639526998987,\n        \"min\": 0.346,\n        \"max\": 440.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          289.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "round(df[['volatile acidity']].describe(),2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "LMMirDs2kUkC",
        "outputId": "24124dfe-0807-47a9-c3bf-3db11ed7897b"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       volatile acidity\n",
              "count           4898.00\n",
              "mean               0.28\n",
              "std                0.10\n",
              "min                0.08\n",
              "25%                0.21\n",
              "50%                0.26\n",
              "75%                0.32\n",
              "max                1.10"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b9d607f1-2ce3-499e-a934-e95a4b17aa8a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>volatile acidity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4898.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9d607f1-2ce3-499e-a934-e95a4b17aa8a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b9d607f1-2ce3-499e-a934-e95a4b17aa8a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b9d607f1-2ce3-499e-a934-e95a4b17aa8a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-824da343-7e1b-495f-b5bf-eb2ddb42d460\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-824da343-7e1b-495f-b5bf-eb2ddb42d460')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-824da343-7e1b-495f-b5bf-eb2ddb42d460 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"round(df[['volatile acidity']]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1731.5858443134678,\n        \"min\": 0.08,\n        \"max\": 4898.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.28,\n          0.26,\n          4898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "media_citric_acid = df['citric acid'].mean()\n",
        "media_citric_acid"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OnX8yqZckUha",
        "outputId": "7dbb0339-39b2-49eb-ea56-cb43b89fc83d"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.33419150673744386"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mediana_residual_sugar = df['residual sugar'].median()\n",
        "mediana_residual_sugar\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QrE38Sn7kUfJ",
        "outputId": "8d2b16d4-10e4-44ff-c2da-a3e5783d4772"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.2"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "moda_quality = df['quality'].mode()\n",
        "moda_quality"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "TUnBNkDnkUc6",
        "outputId": "789c0ab3-a777-4a52-9e21-0ab57426cb08"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    6\n",
              "Name: quality, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "contagem_quality = df['quality'].count()\n",
        "contagem_quality"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cjXPu-AvkUai",
        "outputId": "f22d596a-cebe-4458-b5a5-a1074ed86ea4"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4898"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#variância\n",
        "variancia_chlorides = df['chlorides'].var()\n",
        "variancia_chlorides"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6VD1fhGmkUYL",
        "outputId": "6ae77d82-5a56-4606-ca00-aa1651fb4bc9"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0004773337098245925"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#desvio padrão\n",
        "desvio_padrao_free_sulfur_dioxide = df['free sulfur dioxide'].std()\n",
        "desvio_padrao_free_sulfur_dioxide"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hS5w7WcgkUVy",
        "outputId": "5d1a4f86-f915-4014-a65e-f99cae384203"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "17.007137325232566"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "q_25_density = np.percentile(df['density'], 25)\n",
        "q_25_density\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ictwstzZkUTa",
        "outputId": "89749dda-ba75-467a-c1a4-88eae7d29a5f"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9917225000000001"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.query('quality == 7')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "_6sPoO7ukURK",
        "outputId": "ed2c5b95-087f-43d4-8e60-719e95e52f48"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "13              6.6              0.16         0.40             1.5      0.044   \n",
              "15              6.6              0.17         0.38             1.5      0.032   \n",
              "21              6.4              0.31         0.38             2.9      0.038   \n",
              "29              7.2              0.32         0.36             2.0      0.033   \n",
              "45              7.4              0.18         0.31             1.4      0.058   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "4870            6.1              0.32         0.28             6.6      0.021   \n",
              "4876            6.2              0.38         0.42             2.5      0.038   \n",
              "4886            6.2              0.21         0.28             5.7      0.028   \n",
              "4887            6.2              0.41         0.22             1.9      0.023   \n",
              "4896            5.5              0.29         0.30             1.1      0.022   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "13                   48.0                 143.0  0.99120  3.54       0.52   \n",
              "15                   28.0                 112.0  0.99140  3.25       0.55   \n",
              "21                   19.0                 102.0  0.99120  3.17       0.35   \n",
              "29                   37.0                 114.0  0.99060  3.10       0.71   \n",
              "45                   38.0                 167.0  0.99310  3.16       0.53   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "4870                 29.0                 132.0  0.99188  3.15       0.36   \n",
              "4876                 34.0                 117.0  0.99132  3.36       0.59   \n",
              "4886                 45.0                 121.0  0.99168  3.21       1.08   \n",
              "4887                  5.0                  56.0  0.98928  3.04       0.79   \n",
              "4896                 20.0                 110.0  0.98869  3.34       0.38   \n",
              "\n",
              "      alcohol  quality  \n",
              "13      12.40        7  \n",
              "15      11.40        7  \n",
              "21      11.00        7  \n",
              "29      12.30        7  \n",
              "45      10.00        7  \n",
              "...       ...      ...  \n",
              "4870    11.45        7  \n",
              "4876    11.60        7  \n",
              "4886    12.15        7  \n",
              "4887    13.00        7  \n",
              "4896    12.80        7  \n",
              "\n",
              "[880 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-50de4d2f-4e74-42f0-b991-ffc883f5677f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>6.6</td>\n",
              "      <td>0.16</td>\n",
              "      <td>0.40</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.044</td>\n",
              "      <td>48.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>0.99120</td>\n",
              "      <td>3.54</td>\n",
              "      <td>0.52</td>\n",
              "      <td>12.40</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>6.6</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.38</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.032</td>\n",
              "      <td>28.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>0.99140</td>\n",
              "      <td>3.25</td>\n",
              "      <td>0.55</td>\n",
              "      <td>11.40</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>6.4</td>\n",
              "      <td>0.31</td>\n",
              "      <td>0.38</td>\n",
              "      <td>2.9</td>\n",
              "      <td>0.038</td>\n",
              "      <td>19.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>0.99120</td>\n",
              "      <td>3.17</td>\n",
              "      <td>0.35</td>\n",
              "      <td>11.00</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.36</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.033</td>\n",
              "      <td>37.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>0.99060</td>\n",
              "      <td>3.10</td>\n",
              "      <td>0.71</td>\n",
              "      <td>12.30</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.18</td>\n",
              "      <td>0.31</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.058</td>\n",
              "      <td>38.0</td>\n",
              "      <td>167.0</td>\n",
              "      <td>0.99310</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.53</td>\n",
              "      <td>10.00</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4870</th>\n",
              "      <td>6.1</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.28</td>\n",
              "      <td>6.6</td>\n",
              "      <td>0.021</td>\n",
              "      <td>29.0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0.99188</td>\n",
              "      <td>3.15</td>\n",
              "      <td>0.36</td>\n",
              "      <td>11.45</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4876</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.42</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.038</td>\n",
              "      <td>34.0</td>\n",
              "      <td>117.0</td>\n",
              "      <td>0.99132</td>\n",
              "      <td>3.36</td>\n",
              "      <td>0.59</td>\n",
              "      <td>11.60</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4886</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.28</td>\n",
              "      <td>5.7</td>\n",
              "      <td>0.028</td>\n",
              "      <td>45.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>0.99168</td>\n",
              "      <td>3.21</td>\n",
              "      <td>1.08</td>\n",
              "      <td>12.15</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4887</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.41</td>\n",
              "      <td>0.22</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.023</td>\n",
              "      <td>5.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>0.98928</td>\n",
              "      <td>3.04</td>\n",
              "      <td>0.79</td>\n",
              "      <td>13.00</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4896</th>\n",
              "      <td>5.5</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.022</td>\n",
              "      <td>20.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.98869</td>\n",
              "      <td>3.34</td>\n",
              "      <td>0.38</td>\n",
              "      <td>12.80</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>880 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50de4d2f-4e74-42f0-b991-ffc883f5677f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-50de4d2f-4e74-42f0-b991-ffc883f5677f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-50de4d2f-4e74-42f0-b991-ffc883f5677f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ef291c60-d870-46d5-a4fe-f073560c608b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef291c60-d870-46d5-a4fe-f073560c608b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ef291c60-d870-46d5-a4fe-f073560c608b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 880,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7556702070762419,\n        \"min\": 4.2,\n        \"max\": 9.2,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          7.6,\n          6.45,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09110644141972778,\n        \"min\": 0.08,\n        \"max\": 0.76,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          0.145,\n          0.455,\n          0.16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0791828017806799,\n        \"min\": 0.01,\n        \"max\": 0.74,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          0.39,\n          0.15,\n          0.58\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.297988666241111,\n        \"min\": 0.9,\n        \"max\": 19.25,\n        \"num_unique_values\": 154,\n        \"samples\": [\n          2.4,\n          15.55,\n          1.85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.010697406321943418,\n        \"min\": 0.012,\n        \"max\": 0.135,\n        \"num_unique_values\": 56,\n        \"samples\": [\n          0.044,\n          0.068,\n          0.135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.244737281685689,\n        \"min\": 5.0,\n        \"max\": 108.0,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          34.0,\n          48.0,\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.742981739459985,\n        \"min\": 34.0,\n        \"max\": 229.0,\n        \"num_unique_values\": 147,\n        \"samples\": [\n          37.0,\n          93.0,\n          193.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0027676700979521293,\n        \"min\": 0.98711,\n        \"max\": 1.0004,\n        \"num_unique_values\": 333,\n        \"samples\": [\n          0.9923,\n          0.99044,\n          0.9951\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15840189807735983,\n        \"min\": 2.84,\n        \"max\": 3.82,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          3.16,\n          3.39,\n          3.21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13019470321669058,\n        \"min\": 0.22,\n        \"max\": 1.08,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          0.53,\n          0.22,\n          0.33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.246535806351397,\n        \"min\": 8.6,\n        \"max\": 14.2,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          13.7,\n          10.4,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 7,\n        \"max\": 7,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.query('quality >= 6')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "EwvK1aE_kULa",
        "outputId": "e7736ff8-cee3-457d-9856-2e08a6b10a8b"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0               7.0              0.27         0.36            20.7      0.045   \n",
              "1               6.3              0.30         0.34             1.6      0.049   \n",
              "2               8.1              0.28         0.40             6.9      0.050   \n",
              "3               7.2              0.23         0.32             8.5      0.058   \n",
              "4               7.2              0.23         0.32             8.5      0.058   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "4891            5.7              0.21         0.32             0.9      0.038   \n",
              "4893            6.2              0.21         0.29             1.6      0.039   \n",
              "4895            6.5              0.24         0.19             1.2      0.041   \n",
              "4896            5.5              0.29         0.30             1.1      0.022   \n",
              "4897            6.0              0.21         0.38             0.8      0.020   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                    45.0                 170.0  1.00100  3.00       0.45   \n",
              "1                    14.0                 132.0  0.99400  3.30       0.49   \n",
              "2                    30.0                  97.0  0.99510  3.26       0.44   \n",
              "3                    47.0                 186.0  0.99560  3.19       0.40   \n",
              "4                    47.0                 186.0  0.99560  3.19       0.40   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "4891                 38.0                 121.0  0.99074  3.24       0.46   \n",
              "4893                 24.0                  92.0  0.99114  3.27       0.50   \n",
              "4895                 30.0                 111.0  0.99254  2.99       0.46   \n",
              "4896                 20.0                 110.0  0.98869  3.34       0.38   \n",
              "4897                 22.0                  98.0  0.98941  3.26       0.32   \n",
              "\n",
              "      alcohol  quality  \n",
              "0         8.8        6  \n",
              "1         9.5        6  \n",
              "2        10.1        6  \n",
              "3         9.9        6  \n",
              "4         9.9        6  \n",
              "...       ...      ...  \n",
              "4891     10.6        6  \n",
              "4893     11.2        6  \n",
              "4895      9.4        6  \n",
              "4896     12.8        7  \n",
              "4897     11.8        6  \n",
              "\n",
              "[3258 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d0bfc9b9-1d1f-4d7a-9228-8e68b8fb358a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.0</td>\n",
              "      <td>0.27</td>\n",
              "      <td>0.36</td>\n",
              "      <td>20.7</td>\n",
              "      <td>0.045</td>\n",
              "      <td>45.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>1.00100</td>\n",
              "      <td>3.00</td>\n",
              "      <td>0.45</td>\n",
              "      <td>8.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0.30</td>\n",
              "      <td>0.34</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.049</td>\n",
              "      <td>14.0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0.99400</td>\n",
              "      <td>3.30</td>\n",
              "      <td>0.49</td>\n",
              "      <td>9.5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8.1</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.40</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.050</td>\n",
              "      <td>30.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.99510</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.44</td>\n",
              "      <td>10.1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.32</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.058</td>\n",
              "      <td>47.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>0.99560</td>\n",
              "      <td>3.19</td>\n",
              "      <td>0.40</td>\n",
              "      <td>9.9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.32</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.058</td>\n",
              "      <td>47.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>0.99560</td>\n",
              "      <td>3.19</td>\n",
              "      <td>0.40</td>\n",
              "      <td>9.9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4891</th>\n",
              "      <td>5.7</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.038</td>\n",
              "      <td>38.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>0.99074</td>\n",
              "      <td>3.24</td>\n",
              "      <td>0.46</td>\n",
              "      <td>10.6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4893</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.29</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.039</td>\n",
              "      <td>24.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>0.99114</td>\n",
              "      <td>3.27</td>\n",
              "      <td>0.50</td>\n",
              "      <td>11.2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4895</th>\n",
              "      <td>6.5</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.19</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.041</td>\n",
              "      <td>30.0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0.99254</td>\n",
              "      <td>2.99</td>\n",
              "      <td>0.46</td>\n",
              "      <td>9.4</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4896</th>\n",
              "      <td>5.5</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.022</td>\n",
              "      <td>20.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.98869</td>\n",
              "      <td>3.34</td>\n",
              "      <td>0.38</td>\n",
              "      <td>12.8</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4897</th>\n",
              "      <td>6.0</td>\n",
              "      <td>0.21</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.020</td>\n",
              "      <td>22.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>0.98941</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.32</td>\n",
              "      <td>11.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3258 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0bfc9b9-1d1f-4d7a-9228-8e68b8fb358a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d0bfc9b9-1d1f-4d7a-9228-8e68b8fb358a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d0bfc9b9-1d1f-4d7a-9228-8e68b8fb358a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-137e731d-ceb3-46b9-b5d1-92404b4102ff\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-137e731d-ceb3-46b9-b5d1-92404b4102ff')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-137e731d-ceb3-46b9-b5d1-92404b4102ff button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 3258,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8173272914483861,\n        \"min\": 3.8,\n        \"max\": 14.2,\n        \"num_unique_values\": 60,\n        \"samples\": [\n          7.0,\n          6.6,\n          7.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09013600468519181,\n        \"min\": 0.08,\n        \"max\": 0.965,\n        \"num_unique_values\": 103,\n        \"samples\": [\n          0.4,\n          0.49,\n          0.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10831360297830872,\n        \"min\": 0.0,\n        \"max\": 1.66,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.37,\n          0.36,\n          0.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.929352798772469,\n        \"min\": 0.7,\n        \"max\": 65.8,\n        \"num_unique_values\": 268,\n        \"samples\": [\n          6.0,\n          1.25,\n          12.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01826198560073907,\n        \"min\": 0.012,\n        \"max\": 0.255,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          0.063,\n          0.044,\n          0.025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.138909508607561,\n        \"min\": 3.0,\n        \"max\": 112.0,\n        \"num_unique_values\": 106,\n        \"samples\": [\n          112.0,\n          16.0,\n          28.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39.0971516821081,\n        \"min\": 18.0,\n        \"max\": 294.0,\n        \"num_unique_values\": 219,\n        \"samples\": [\n          46.0,\n          145.0,\n          162.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003031735764248754,\n        \"min\": 0.98711,\n        \"max\": 1.03898,\n        \"num_unique_values\": 738,\n        \"samples\": [\n          0.99136,\n          0.98994,\n          0.99437\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1535171800254031,\n        \"min\": 2.72,\n        \"max\": 3.82,\n        \"num_unique_values\": 97,\n        \"samples\": [\n          3.01,\n          2.99,\n          2.85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12017089621646808,\n        \"min\": 0.22,\n        \"max\": 1.08,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          0.57,\n          0.45,\n          0.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2474338316099234,\n        \"min\": 8.5,\n        \"max\": 14.2,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          12.5,\n          10.9,\n          14.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 6,\n        \"max\": 9,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          9,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.query('quality == 8 and alcohol == 13')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "9wbxDmhrk9CS",
        "outputId": "e079f5b6-9616-462b-b64b-7205f27300e8"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "2922            6.5              0.44         0.47            5.45      0.014   \n",
              "2965            5.5              0.34         0.26            2.20      0.021   \n",
              "3660            5.8              0.32         0.28            4.30      0.032   \n",
              "3667            5.8              0.32         0.28            4.30      0.032   \n",
              "3672            7.3              0.41         0.29            1.80      0.032   \n",
              "4765            5.2              0.30         0.34            1.50      0.038   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "2922                 44.0                 137.0  0.98984  3.13       0.32   \n",
              "2965                 31.0                 119.0  0.98919  3.55       0.49   \n",
              "3660                 46.0                 115.0  0.98946  3.16       0.57   \n",
              "3667                 46.0                 115.0  0.98946  3.16       0.57   \n",
              "3672                 26.0                  74.0  0.98889  2.96       0.35   \n",
              "4765                 18.0                  96.0  0.98942  3.56       0.48   \n",
              "\n",
              "      alcohol  quality  \n",
              "2922     13.0        8  \n",
              "2965     13.0        8  \n",
              "3660     13.0        8  \n",
              "3667     13.0        8  \n",
              "3672     13.0        8  \n",
              "4765     13.0        8  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d089602-c5e6-4141-8b73-9eef9967af6c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2922</th>\n",
              "      <td>6.5</td>\n",
              "      <td>0.44</td>\n",
              "      <td>0.47</td>\n",
              "      <td>5.45</td>\n",
              "      <td>0.014</td>\n",
              "      <td>44.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>0.98984</td>\n",
              "      <td>3.13</td>\n",
              "      <td>0.32</td>\n",
              "      <td>13.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2965</th>\n",
              "      <td>5.5</td>\n",
              "      <td>0.34</td>\n",
              "      <td>0.26</td>\n",
              "      <td>2.20</td>\n",
              "      <td>0.021</td>\n",
              "      <td>31.0</td>\n",
              "      <td>119.0</td>\n",
              "      <td>0.98919</td>\n",
              "      <td>3.55</td>\n",
              "      <td>0.49</td>\n",
              "      <td>13.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3660</th>\n",
              "      <td>5.8</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.28</td>\n",
              "      <td>4.30</td>\n",
              "      <td>0.032</td>\n",
              "      <td>46.0</td>\n",
              "      <td>115.0</td>\n",
              "      <td>0.98946</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.57</td>\n",
              "      <td>13.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3667</th>\n",
              "      <td>5.8</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.28</td>\n",
              "      <td>4.30</td>\n",
              "      <td>0.032</td>\n",
              "      <td>46.0</td>\n",
              "      <td>115.0</td>\n",
              "      <td>0.98946</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.57</td>\n",
              "      <td>13.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3672</th>\n",
              "      <td>7.3</td>\n",
              "      <td>0.41</td>\n",
              "      <td>0.29</td>\n",
              "      <td>1.80</td>\n",
              "      <td>0.032</td>\n",
              "      <td>26.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>0.98889</td>\n",
              "      <td>2.96</td>\n",
              "      <td>0.35</td>\n",
              "      <td>13.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4765</th>\n",
              "      <td>5.2</td>\n",
              "      <td>0.30</td>\n",
              "      <td>0.34</td>\n",
              "      <td>1.50</td>\n",
              "      <td>0.038</td>\n",
              "      <td>18.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>0.98942</td>\n",
              "      <td>3.56</td>\n",
              "      <td>0.48</td>\n",
              "      <td>13.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d089602-c5e6-4141-8b73-9eef9967af6c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3d089602-c5e6-4141-8b73-9eef9967af6c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3d089602-c5e6-4141-8b73-9eef9967af6c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b1e37956-2f36-42a5-b5af-4f17309b174d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b1e37956-2f36-42a5-b5af-4f17309b174d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b1e37956-2f36-42a5-b5af-4f17309b174d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7626707459098365,\n        \"min\": 5.2,\n        \"max\": 7.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.5,\n          5.2,\n          5.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05648008498577175,\n        \"min\": 0.3,\n        \"max\": 0.44,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.34,\n          0.3,\n          0.32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07823042886243177,\n        \"min\": 0.26,\n        \"max\": 0.47,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.26,\n          0.34,\n          0.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6316913515327174,\n        \"min\": 1.5,\n        \"max\": 5.45,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.2,\n          1.5,\n          4.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.008863783992554572,\n        \"min\": 0.014,\n        \"max\": 0.038,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.021,\n          0.038,\n          0.014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.906580813426945,\n        \"min\": 18.0,\n        \"max\": 46.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          31.0,\n          18.0,\n          46.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.676408066528612,\n        \"min\": 74.0,\n        \"max\": 137.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          119.0,\n          96.0,\n          115.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0003169016671882087,\n        \"min\": 0.98889,\n        \"max\": 0.98984,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.98919,\n          0.98942,\n          0.98946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2452481736255474,\n        \"min\": 2.96,\n        \"max\": 3.56,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.55,\n          3.56,\n          3.16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10689558768567889,\n        \"min\": 0.32,\n        \"max\": 0.57,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.49,\n          0.48,\n          0.57\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 13.0,\n        \"max\": 13.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          13.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 8,\n        \"max\": 8,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.query('quality == 8 or alcohol >= 13')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "6EbjYFIFk9AC",
        "outputId": "d8bacaf0-294a-4557-93cc-b65fbd7caca4"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "17              6.2             0.660         0.48             1.2      0.029   \n",
              "20              6.2             0.660         0.48             1.2      0.029   \n",
              "22              6.8             0.260         0.42             1.7      0.049   \n",
              "68              6.7             0.230         0.31             2.1      0.046   \n",
              "74              6.7             0.230         0.31             2.1      0.046   \n",
              "...             ...               ...          ...             ...        ...   \n",
              "4837            6.5             0.280         0.38             7.8      0.031   \n",
              "4863            6.2             0.360         0.32             4.0      0.036   \n",
              "4865            6.2             0.355         0.35             2.0      0.046   \n",
              "4867            5.3             0.600         0.34             1.4      0.031   \n",
              "4887            6.2             0.410         0.22             1.9      0.023   \n",
              "\n",
              "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "17                   29.0                  75.0  0.98920  3.33       0.39   \n",
              "20                   29.0                  75.0  0.98920  3.33       0.39   \n",
              "22                   41.0                 122.0  0.99300  3.47       0.48   \n",
              "68                   30.0                  96.0  0.99260  3.33       0.64   \n",
              "74                   30.0                  96.0  0.99260  3.33       0.64   \n",
              "...                   ...                   ...      ...   ...        ...   \n",
              "4837                 54.0                 216.0  0.99154  3.03       0.42   \n",
              "4863                 44.0                  92.0  0.98936  3.20       0.50   \n",
              "4865                 31.0                  95.0  0.98822  3.06       0.46   \n",
              "4867                  3.0                  60.0  0.98854  3.27       0.38   \n",
              "4887                  5.0                  56.0  0.98928  3.04       0.79   \n",
              "\n",
              "      alcohol  quality  \n",
              "17       12.8        8  \n",
              "20       12.8        8  \n",
              "22       10.5        8  \n",
              "68       10.7        8  \n",
              "74       10.7        8  \n",
              "...       ...      ...  \n",
              "4837     13.1        6  \n",
              "4863     13.3        7  \n",
              "4865     13.6        6  \n",
              "4867     13.0        6  \n",
              "4887     13.0        7  \n",
              "\n",
              "[295 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ca4a9976-793a-443f-9ae5-7f5ef898f7cc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.660</td>\n",
              "      <td>0.48</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.029</td>\n",
              "      <td>29.0</td>\n",
              "      <td>75.0</td>\n",
              "      <td>0.98920</td>\n",
              "      <td>3.33</td>\n",
              "      <td>0.39</td>\n",
              "      <td>12.8</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.660</td>\n",
              "      <td>0.48</td>\n",
              "      <td>1.2</td>\n",
              "      <td>0.029</td>\n",
              "      <td>29.0</td>\n",
              "      <td>75.0</td>\n",
              "      <td>0.98920</td>\n",
              "      <td>3.33</td>\n",
              "      <td>0.39</td>\n",
              "      <td>12.8</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>6.8</td>\n",
              "      <td>0.260</td>\n",
              "      <td>0.42</td>\n",
              "      <td>1.7</td>\n",
              "      <td>0.049</td>\n",
              "      <td>41.0</td>\n",
              "      <td>122.0</td>\n",
              "      <td>0.99300</td>\n",
              "      <td>3.47</td>\n",
              "      <td>0.48</td>\n",
              "      <td>10.5</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>6.7</td>\n",
              "      <td>0.230</td>\n",
              "      <td>0.31</td>\n",
              "      <td>2.1</td>\n",
              "      <td>0.046</td>\n",
              "      <td>30.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>0.99260</td>\n",
              "      <td>3.33</td>\n",
              "      <td>0.64</td>\n",
              "      <td>10.7</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>6.7</td>\n",
              "      <td>0.230</td>\n",
              "      <td>0.31</td>\n",
              "      <td>2.1</td>\n",
              "      <td>0.046</td>\n",
              "      <td>30.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>0.99260</td>\n",
              "      <td>3.33</td>\n",
              "      <td>0.64</td>\n",
              "      <td>10.7</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4837</th>\n",
              "      <td>6.5</td>\n",
              "      <td>0.280</td>\n",
              "      <td>0.38</td>\n",
              "      <td>7.8</td>\n",
              "      <td>0.031</td>\n",
              "      <td>54.0</td>\n",
              "      <td>216.0</td>\n",
              "      <td>0.99154</td>\n",
              "      <td>3.03</td>\n",
              "      <td>0.42</td>\n",
              "      <td>13.1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4863</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.360</td>\n",
              "      <td>0.32</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.036</td>\n",
              "      <td>44.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>0.98936</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.50</td>\n",
              "      <td>13.3</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4865</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.355</td>\n",
              "      <td>0.35</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.046</td>\n",
              "      <td>31.0</td>\n",
              "      <td>95.0</td>\n",
              "      <td>0.98822</td>\n",
              "      <td>3.06</td>\n",
              "      <td>0.46</td>\n",
              "      <td>13.6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4867</th>\n",
              "      <td>5.3</td>\n",
              "      <td>0.600</td>\n",
              "      <td>0.34</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.031</td>\n",
              "      <td>3.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.98854</td>\n",
              "      <td>3.27</td>\n",
              "      <td>0.38</td>\n",
              "      <td>13.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4887</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.410</td>\n",
              "      <td>0.22</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.023</td>\n",
              "      <td>5.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>0.98928</td>\n",
              "      <td>3.04</td>\n",
              "      <td>0.79</td>\n",
              "      <td>13.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>295 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca4a9976-793a-443f-9ae5-7f5ef898f7cc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ca4a9976-793a-443f-9ae5-7f5ef898f7cc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ca4a9976-793a-443f-9ae5-7f5ef898f7cc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3a1f5e6b-8a24-4cf3-ac70-2d03002206fe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3a1f5e6b-8a24-4cf3-ac70-2d03002206fe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3a1f5e6b-8a24-4cf3-ac70-2d03002206fe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 295,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8253206386477231,\n        \"min\": 3.9,\n        \"max\": 8.4,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          5.7,\n          4.4,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12100391729005638,\n        \"min\": 0.12,\n        \"max\": 0.785,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          0.66,\n          0.24,\n          0.41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1062636728948391,\n        \"min\": 0.0,\n        \"max\": 1.23,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          0.27,\n          0.54,\n          0.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8797233331688425,\n        \"min\": 0.8,\n        \"max\": 15.5,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          4.2,\n          0.8,\n          5.15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013713888883147611,\n        \"min\": 0.009,\n        \"max\": 0.16,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          0.013,\n          0.043,\n          0.048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.461141003345508,\n        \"min\": 3.0,\n        \"max\": 105.0,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          29.0,\n          45.0,\n          48.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.36661217014996,\n        \"min\": 9.0,\n        \"max\": 294.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          123.0,\n          59.0,\n          137.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0026484357407825254,\n        \"min\": 0.98711,\n        \"max\": 1.0006,\n        \"num_unique_values\": 173,\n        \"samples\": [\n          0.98845,\n          0.9942,\n          0.98896\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14457707977355605,\n        \"min\": 2.82,\n        \"max\": 3.59,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          3.06,\n          3.15,\n          3.33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15369193425080263,\n        \"min\": 0.22,\n        \"max\": 0.96,\n        \"num_unique_values\": 59,\n        \"samples\": [\n          0.39,\n          0.58,\n          0.59\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3032812244920047,\n        \"min\": 8.5,\n        \"max\": 14.2,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          14.2,\n          12.0,\n          13.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 4,\n        \"max\": 8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7,\n          4,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(df['quality'],df['alcohol'],color='red')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "UBAIY94xk898",
        "outputId": "12d99566-fc5e-4f17-bd53-3c94089f9b46"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,4))\n",
        "plt.bar(df['quality'],df['alcohol'],color='red')\n",
        "plt.show()\n",
        "sns.barplot(data=df, x='quality', y='alcohol')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 800
        },
        "id": "8iDKRHUVk87i",
        "outputId": "86b646b4-f2dd-4b6a-97b4-9442ae6c97e4"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Gráfico de pizza com a porcentagem de cada tipo classificado\n",
        "df['quality'].value_counts().plot.pie(autopct='%0.2f%%');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "tBAHyyT4k85K",
        "outputId": "3a3c52fe-e955-4c38-f978-d826e5eeb9aa"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = px.pie(df, values='quality', names='quality')\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "ToI-n2tOk82q",
        "outputId": "4917d48c-5e96-4edc-f322-5c11bd22d216"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"caeb301c-4e12-40e7-94a8-4157e5e52113\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"caeb301c-4e12-40e7-94a8-4157e5e52113\")) {                    Plotly.newPlot(                        \"caeb301c-4e12-40e7-94a8-4157e5e52113\",                        [{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"hovertemplate\":\"quality=%{value}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"labels\":[6,6,6,6,6,6,6,6,6,6,5,5,5,7,5,7,6,8,6,5,8,7,8,5,6,6,6,6,6,7,6,6,6,6,5,5,5,6,5,5,6,6,6,6,6,7,4,5,6,5,6,7,7,6,6,6,6,6,6,6,6,6,5,6,6,5,7,5,8,5,6,5,5,6,8,5,7,7,5,5,6,6,5,6,5,6,6,6,5,6,6,5,7,7,7,6,6,7,4,6,5,5,5,5,5,6,5,6,6,5,6,5,5,5,5,4,6,6,5,5,5,5,5,6,6,6,5,7,7,6,5,7,5,5,5,5,6,5,7,6,5,5,6,6,6,6,6,4,7,6,7,6,6,5,6,6,6,7,8,8,7,5,5,6,5,5,6,7,5,5,6,6,4,7,5,6,4,5,4,6,6,5,5,6,5,5,6,5,8,4,6,5,6,5,5,6,5,5,5,5,5,5,5,6,4,5,5,4,5,6,5,7,5,6,7,5,5,5,5,5,5,6,7,6,6,5,6,6,6,5,4,6,6,6,6,6,6,6,7,6,5,5,7,6,5,6,7,7,7,5,4,3,5,3,6,8,7,7,6,4,6,5,5,6,6,5,6,5,6,6,6,5,5,5,5,6,6,5,4,7,8,8,4,5,5,5,6,7,7,7,7,6,5,7,3,6,5,7,6,6,6,6,6,6,6,6,5,6,7,6,7,8,6,6,5,6,6,5,7,6,7,5,6,6,5,5,6,6,6,5,8,5,6,5,5,6,6,6,5,7,7,6,6,5,6,6,7,6,6,5,7,7,6,7,6,6,6,6,6,6,6,5,6,6,7,7,6,6,6,5,6,6,5,6,7,7,7,7,6,7,7,6,6,6,7,7,7,5,6,7,7,5,6,6,5,5,5,6,5,6,6,5,5,5,6,5,7,5,6,5,6,6,5,5,6,6,6,5,6,6,7,6,6,6,7,6,6,5,5,5,5,5,7,4,8,7,5,8,7,5,7,6,8,6,6,3,5,6,6,7,5,5,7,7,7,6,7,5,6,5,5,5,5,6,5,5,6,6,5,5,6,5,6,7,6,5,7,6,6,6,5,6,5,5,5,6,6,6,6,6,6,7,6,6,6,6,4,6,5,4,6,6,6,5,6,6,5,7,6,7,6,6,6,6,7,6,5,6,6,5,5,5,6,6,5,6,4,6,6,6,6,5,6,6,6,5,5,6,5,6,4,5,6,6,6,6,6,6,7,5,7,7,7,7,7,7,5,6,5,6,7,5,6,7,5,6,6,5,6,6,5,7,5,7,7,6,6,7,7,7,5,5,6,6,7,6,6,7,7,6,5,6,5,5,5,7,5,6,8,7,6,6,5,5,6,6,5,5,5,6,8,6,5,5,5,5,7,6,6,6,5,5,6,5,5,8,4,6,6,6,5,5,6,5,6,6,7,5,5,5,7,4,6,5,5,5,4,6,5,7,7,7,7,6,7,6,6,5,5,4,5,7,4,5,6,5,6,6,6,5,6,6,8,6,5,6,6,7,7,7,5,5,6,5,5,5,7,4,6,7,4,6,5,5,6,5,6,5,5,5,5,7,4,6,6,5,5,6,6,5,5,6,6,5,6,7,6,5,7,7,5,5,6,8,7,5,7,5,5,5,6,6,7,6,5,6,6,5,7,6,3,6,6,5,5,6,6,6,6,6,6,6,6,6,5,7,5,6,7,7,6,6,5,6,6,6,5,6,7,7,7,7,7,5,9,6,6,5,7,8,4,6,7,8,5,6,6,6,7,6,6,7,5,7,5,5,6,6,6,8,6,5,5,7,6,6,5,6,6,6,5,6,7,6,6,5,5,5,5,5,9,6,5,6,5,6,6,9,7,7,6,4,8,6,6,8,8,8,8,7,7,7,7,7,8,8,5,5,7,6,7,5,7,5,7,7,5,5,7,5,8,7,6,6,5,6,7,8,7,6,5,5,6,3,5,7,9,6,6,8,7,6,6,6,6,7,6,7,6,7,6,7,5,7,7,6,6,6,6,6,7,6,5,6,8,4,4,8,4,5,5,5,5,5,4,5,7,6,6,7,7,6,6,6,8,5,5,7,5,5,7,5,6,5,5,5,5,5,6,7,5,6,7,7,7,7,5,5,4,5,5,6,6,5,6,5,5,7,7,6,6,7,6,6,6,5,6,6,7,7,7,7,6,7,6,5,6,5,7,5,6,7,6,6,5,6,6,6,5,7,6,4,5,4,6,6,5,6,6,7,7,5,6,7,6,6,6,5,7,6,6,7,6,5,5,5,5,6,6,6,7,7,8,6,6,6,6,4,7,4,6,6,6,6,3,6,5,5,7,5,4,5,4,5,7,5,5,5,5,6,5,6,5,4,5,5,6,5,6,4,7,5,5,5,6,5,6,7,7,6,7,5,7,5,6,7,6,5,5,6,7,6,6,6,7,5,8,8,6,7,6,6,6,7,5,8,6,7,6,7,6,6,5,5,5,7,8,7,7,4,7,6,6,5,4,8,5,5,5,5,6,6,7,5,5,6,7,7,5,7,6,6,5,5,5,6,8,8,5,5,6,5,5,5,5,5,5,5,6,5,5,5,4,6,4,4,6,6,6,6,6,6,7,6,6,5,5,6,5,6,6,5,6,5,6,5,7,6,5,5,5,6,5,6,7,5,5,8,6,5,6,7,6,7,6,6,7,7,6,7,6,7,5,6,6,5,6,5,6,6,6,5,6,6,6,5,8,5,8,8,6,7,6,5,7,6,7,5,6,3,6,7,7,6,6,5,6,5,7,5,6,7,7,7,5,4,7,6,7,5,7,5,6,7,5,6,6,6,6,6,6,6,6,6,5,7,8,7,5,6,7,5,5,5,6,6,7,5,6,6,6,7,5,8,7,6,7,7,7,6,6,6,6,4,4,6,6,7,6,5,6,5,6,6,5,7,8,5,6,6,6,6,5,5,6,6,6,5,6,5,6,6,6,5,6,7,6,6,6,5,5,6,7,8,6,6,8,5,5,6,6,5,6,6,8,8,7,7,8,4,7,7,6,5,5,5,6,6,8,7,6,7,7,4,5,7,6,5,6,5,6,7,6,6,7,7,6,6,7,6,7,7,6,6,6,5,7,6,7,6,6,6,6,6,7,7,7,7,7,6,7,6,8,8,5,4,8,6,7,6,6,6,8,6,6,5,6,3,5,7,4,6,5,4,6,6,6,5,7,5,4,5,7,6,5,5,5,7,5,5,5,5,5,6,6,6,6,6,6,6,6,5,6,7,5,5,6,6,6,6,6,6,6,6,8,5,6,7,5,5,7,6,5,6,4,6,5,6,6,6,6,6,6,4,3,6,6,6,6,5,6,5,5,8,8,7,5,7,6,6,7,5,5,7,8,7,6,6,6,5,5,6,7,6,7,6,6,6,6,5,6,5,5,6,6,5,6,6,6,6,5,7,7,6,6,6,5,6,6,6,6,4,6,6,5,6,6,6,6,6,6,6,7,7,7,7,6,6,4,4,6,5,7,6,5,6,5,5,6,5,5,6,6,5,4,6,6,4,5,4,5,6,7,5,6,5,5,6,5,6,6,6,6,6,6,6,5,6,6,6,6,6,5,7,5,9,6,7,5,7,6,6,7,7,5,6,6,6,6,8,7,5,6,6,7,6,6,5,6,6,5,6,8,7,6,6,5,6,5,5,5,6,7,7,7,7,6,7,5,4,7,6,4,6,5,5,5,6,5,5,6,6,7,6,4,8,5,6,7,6,6,7,5,5,6,5,7,6,6,5,5,6,7,7,7,7,5,7,3,6,4,7,6,5,6,6,6,6,6,6,6,5,4,5,5,6,6,5,4,5,5,5,6,6,5,8,6,6,4,6,7,7,6,8,6,6,6,6,5,6,6,6,5,6,6,6,5,6,5,4,6,6,6,6,5,5,5,6,5,6,6,7,6,7,6,6,5,5,5,5,6,6,7,6,5,5,5,5,5,7,6,6,6,6,6,6,5,6,8,8,5,4,6,6,7,6,7,7,5,7,5,5,6,5,5,6,5,8,6,6,6,5,6,6,6,5,5,6,5,6,6,5,6,6,7,6,7,4,6,6,6,5,7,6,5,5,5,6,6,7,7,7,7,7,6,5,6,7,6,6,5,7,6,6,6,5,5,5,5,6,7,6,7,5,7,6,4,5,5,6,6,6,7,5,6,6,6,6,7,7,6,6,5,5,5,5,6,6,6,6,5,6,5,5,5,6,5,5,5,5,5,5,5,5,5,6,6,6,6,7,6,5,6,5,6,6,5,7,7,5,5,6,6,6,6,7,5,6,6,6,7,5,5,5,4,6,6,5,6,5,6,3,6,5,6,5,6,7,5,5,5,5,5,5,5,6,6,5,7,5,5,4,7,6,5,5,5,6,6,5,5,5,5,6,5,6,6,7,6,7,6,7,5,5,5,6,5,6,6,6,8,8,8,8,8,6,6,5,6,7,4,8,5,6,6,6,6,6,6,6,5,5,6,6,6,6,6,6,5,7,6,5,5,6,5,6,7,5,7,6,6,6,6,6,5,5,5,5,6,6,6,5,6,5,5,5,6,5,5,5,6,5,6,6,6,5,5,5,5,7,3,5,5,5,5,6,5,7,5,5,5,6,5,5,6,5,5,5,6,7,6,6,5,5,6,5,5,6,6,4,5,5,6,5,6,6,5,6,6,6,5,5,5,5,5,5,5,5,6,5,5,6,5,5,5,5,5,6,6,6,5,5,5,5,6,5,4,5,6,4,5,7,5,5,7,5,5,5,6,5,5,6,6,6,6,5,6,5,5,5,5,5,5,7,6,6,6,5,5,6,6,5,6,6,4,5,4,6,6,4,6,7,6,6,5,5,5,7,7,7,7,7,5,5,7,7,5,7,5,6,6,6,5,5,6,7,5,5,6,6,6,5,6,6,6,5,6,6,5,6,5,6,5,5,5,5,6,7,5,6,7,6,6,6,5,6,5,6,6,7,6,6,7,6,7,4,5,5,7,6,7,6,6,5,5,6,5,4,6,6,5,5,5,5,5,7,4,6,6,5,6,7,5,5,6,6,5,6,5,6,5,6,6,5,6,5,5,6,6,6,7,6,6,5,7,4,6,6,6,5,6,6,5,5,5,5,5,5,5,7,7,6,6,7,7,6,7,6,8,7,7,5,5,5,6,7,5,5,5,6,5,7,5,7,6,6,7,5,4,7,6,5,6,6,5,6,5,6,5,5,6,5,6,8,5,5,5,4,5,6,6,5,8,5,6,6,4,6,6,5,5,6,6,7,6,7,6,5,5,5,6,5,6,5,5,5,5,6,6,6,7,5,4,3,6,6,6,6,5,4,4,6,8,6,8,5,4,4,4,8,8,6,7,6,5,5,5,6,6,6,4,4,6,6,5,5,6,6,5,4,6,6,4,4,4,5,6,5,5,5,7,5,5,6,5,6,6,6,6,6,5,5,5,6,6,4,5,6,5,6,5,6,5,5,5,5,5,6,6,6,5,5,7,6,5,6,6,6,6,5,5,5,5,7,5,5,5,6,6,5,5,7,6,6,7,5,6,7,6,6,5,6,6,6,5,6,5,6,6,6,6,5,6,4,4,5,5,5,5,6,5,5,4,4,6,6,6,7,6,5,6,6,6,5,7,7,6,6,7,5,5,7,8,5,5,8,7,6,6,5,6,4,4,5,7,6,6,6,6,5,5,6,5,6,6,6,5,5,6,5,5,6,5,7,7,7,5,7,7,5,6,5,6,5,6,5,7,5,6,6,5,6,5,5,5,6,5,5,7,6,5,7,7,7,7,7,7,6,7,4,6,7,5,5,7,5,5,6,5,6,7,5,6,7,7,6,6,6,6,6,5,5,7,5,5,7,7,7,7,6,5,5,7,7,5,5,7,7,6,5,6,7,5,5,5,6,5,5,6,6,6,5,5,5,6,7,7,5,6,6,5,5,7,5,5,5,4,7,7,6,6,6,6,8,7,5,7,7,6,5,7,7,7,6,7,7,6,6,5,6,6,6,6,5,6,7,6,5,6,6,6,6,6,6,6,6,6,5,6,6,7,5,5,5,6,6,6,5,6,5,5,5,5,6,6,6,5,6,6,6,7,5,7,6,6,5,6,6,6,7,5,5,5,7,6,6,6,7,5,7,6,5,6,6,6,7,6,6,8,6,8,6,6,8,5,5,6,5,6,6,6,5,5,6,6,6,6,6,6,5,7,6,7,7,8,8,8,6,7,5,5,6,6,6,6,5,6,5,5,5,6,5,5,7,5,8,7,5,7,7,5,5,6,8,8,6,5,5,6,7,7,5,6,7,7,5,5,7,4,6,5,5,5,6,6,6,6,7,7,5,5,5,6,7,6,6,6,6,7,7,6,6,6,6,5,7,7,5,5,5,5,5,5,6,6,7,7,8,7,6,6,6,6,6,6,6,7,7,5,6,7,6,7,8,7,6,5,5,6,6,5,7,5,7,7,6,5,5,4,6,8,6,5,7,7,5,5,5,5,5,6,7,5,6,7,5,5,6,6,6,5,5,7,5,6,6,6,7,6,5,4,6,8,6,6,5,8,7,7,6,8,8,6,6,5,4,5,5,8,8,6,5,5,8,6,8,6,6,6,6,5,5,5,5,7,5,6,6,5,7,7,6,5,7,5,8,6,6,5,6,5,5,6,6,6,6,6,6,6,7,7,7,6,6,6,7,7,7,7,6,7,7,7,7,7,6,8,6,7,7,7,7,7,7,6,6,6,7,7,6,5,6,6,6,6,6,6,6,8,6,6,4,5,6,6,7,6,5,6,8,8,6,5,6,6,7,5,6,6,6,5,6,6,6,6,6,6,5,6,5,4,5,7,5,6,6,5,5,5,6,5,5,8,5,5,6,5,4,6,8,8,7,6,5,5,7,5,5,5,5,6,5,6,7,6,6,7,3,6,7,6,6,6,7,6,6,7,5,7,7,7,6,6,7,5,6,6,6,5,4,6,7,5,6,6,6,7,7,7,5,6,5,6,5,6,5,7,5,6,6,6,5,6,6,6,6,5,6,6,6,6,7,6,5,6,6,6,6,6,6,6,6,6,6,6,7,5,7,7,6,6,5,7,7,6,6,6,7,6,6,6,6,8,8,8,6,6,5,6,4,6,6,5,6,7,6,4,7,8,5,7,6,6,5,5,6,7,6,7,7,7,6,7,7,5,7,7,6,5,5,5,6,5,6,6,6,5,5,4,7,5,6,6,6,6,7,6,6,6,7,6,6,5,6,6,6,6,7,5,7,6,7,6,7,7,5,6,6,7,7,6,6,8,8,5,6,6,6,6,6,6,5,7,8,6,3,6,6,6,5,5,7,7,7,5,4,8,7,5,6,5,6,7,6,6,7,7,7,6,5,5,8,5,7,6,5,5,5,6,7,5,8,6,7,7,7,7,3,6,7,7,7,7,7,6,7,6,6,7,5,5,6,7,6,6,7,5,7,5,6,6,6,7,6,6,6,6,6,6,6,6,6,5,7,6,6,6,6,6,6,6,6,6,6,7,6,6,7,6,6,7,6,6,6,6,7,6,6,6,7,6,6,6,7,5,6,6,6,8,5,7,7,7,6,6,6,8,5,6,7,6,8,6,6,5,5,6,6,5,6,6,5,6,5,6,6,6,5,6,3,7,6,6,6,7,7,6,4,6,7,5,8,8,5,6,6,6,6,6,5,6,6,5,7,6,6,6,5,5,5,5,5,7,6,5,8,6,6,7,8,7,7,5,6,5,6,5,7,7,6,6,8,6,7,5,6,6,5,8,6,8,6,6,8,6,6,8,7,6,7,8,5,8,7,8,7,6,6,6,8,7,6,7,7,6,7,7,6,6,7,7,6,5,7,7,7,6,7,5,6,6,7,6,6,6,7,7,7,5,7,5,7,5,5,6,6,6,6,4,7,5,5,6,6,5,5,6,5,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,6,6,4,6,5,6,5,6,6,6,6,7,6,6,4,6,6,6,7,5,7,4,7,5,7,6,6,7,7,7,6,6,6,7,5,7,7,7,7,7,6,7,6,6,7,6,7,6,5,5,6,6,6,5,6,6,6,5,6,5,5,7,6,7,7,6,6,7,5,5,5,6,6,6,6,6,6,7,6,7,7,7,6,6,6,6,6,7,6,7,7,5,6,4,6,6,6,6,7,7,8,7,8,8,6,4,6,8,8,7,8,5,7,6,7,8,7,5,6,7,6,5,7,6,8,7,6,7,6,5,5,6,8,7,6,7,7,5,6,7,6,6,5,5,5,6,6,6,6,6,6,5,5,5,6,5,5,4,6,5,6,5,5,7,5,5,7,6,6,7,7,7,5,6,6,5,6,5,6,4,5,6,7,7,7,7,7,7,7,5,6,5,6,7,5,5,5,8,6,5,5,5,6,6,7,5,5,8,5,5,5,6,5,4,6,6,5,5,6,5,6,7,7,5,6,6,5,6,7,5,5,5,6,5,5,6,6,5,6,6,5,5,5,5,6,5,6,5,6,5,5,6,6,3,5,5,5,5,7,5,6,6,6,5,6,6,5,7,6,6,5,6,7,7,5,5,6,5,5,6,6,5,5,6,6,6,7,6,5,6,5,6,5,6,7,6,7,6,6,6,6,6,5,5,6,6,6,7,6,6,5,6,6,6,6,4,5,5,7,5,5,5,4,6,6,5,6,6,6,6,6,6,6,6,5,5,5,6,6,6,6,7,5,5,4,6,6,7,7,7,7,7,7,6,6,7,6,7,7,6,5,7,6,6,5,7,5,5,5,6,5,5,5,6,6,8,4,6,5,6,5,6,6,5,5,6,6,6,6,6,7,5,5,5,5,6,7,5,6,5,5,6,6,6,5,7,7,5,4,6,4,6,6,7,6,6,4,6,7,7,6,7,6,5,7,7,6,7,6,6,6,6,6,6,5,7,7,7,5,7,7,6,6,6,5,6,6,7,6,6,5,6,6,6,7,6,6,6,5,5,6,6,5,4,5,5,6,6,6,6,5,6,6,5,5,5,6,5,6,5,5,5,4,5,5,7,7,7,7,7,6,6,6,7,6,5,7,7,6,5,6,6,6,5,5,6,5,5,8,6,5,6,6,5,6,7,5,4,6,5,6,6,6,6,6,6,5,8,6,6,6,6,6,6,6,6,6,7,6,5,6,5,6,6,5,5,7,7,7,5,6,6,6,5,6,6,6,6,6,6,6,8,7,5,6,6,6,7,5,5,5,5,7,6,5,5,6,6,5,6,5,6,7,6,6,6,6,6,6,7,7,6,7,5,6,6,5,5,5,5,7,7,7,7,7,7,5,5,7,7,8,6,7,7,5,6,5,6,7,6,6,7,5,6,6,6,7,7,5,5,6,6,5,6,5,6,6,6,8,6,5,5,6,6,6,6,5,6,6,6,7,6,6,6,6,4,4,5,5,5,4,6,5,6,6,4,4,7,5,7,7,6,6,6,6,6,6,6,5,5,5,5,7,6,6,7,6,5,5,6,6,6,6,6,6,6,4,5,5,5,5,6,6,6,7,6,6,6,6,7,7,6,5,6,5,6,6,6,6,7,5,4,6,6,5,5,6,6,6,6,5,6,6,5,5,6,5,5,5,6,6,6,6,5,5,6,6,6,6,6,7,6,6,6,5,6,6,7,7,5,7,7,7,5,6,7,6,6,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,6,6,6,6,6,6,7,6,5,6,6,5,6,6,6,5,6,5,6,5,6,6,5,6,5,6,5,6,6,5,5,6,6,5,6,5,6,5,5,6,6,6,6,5,5,6,6,6,4,5,5,5,6,6,5,5,5,5,5,5,6,6,5,5,5,7,6,5,7,5,7,7,7,7,5,5,6,6,6,6,6,6,6,6,6,6,5,6,6,5,6,6,5,6,6,6,6,5,5,5,6,5,5,6,6,6,6,5,6,6,5,5,6,6,5,5,5,7,5,6,6,6,6,5,5,5,5,6,6,6,6,5,5,6,6,6,5,5,5,5,5,6,4,5,6,6,6,6,6,6,6,6,6,6,6,6,5,5,6,6,6,6,7,5,5,6,5,4,5,6,6,6,6,5,6,6,6,6,6,5,5,6,5,6,6,6,6,6,6,6,6,6,5,6,6,6,5,6,5,6,6,5,5,6,6,6,6,5,5,6,6,6,6,6,5,5,6,6,7,6,6,7,7,7,5,5,5,6,6,6,7,7,6,7,7,5,6,7,6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6,5,6,7,4,6,5,5,5,5,7,5,7,7,5,6,7,7,6,6,5,6,6,6,7,7,7,6,6,6,6,5,6,5,6,6,6,7,6,6,7,7,7,5,5,5,7,5,7,7,7,7,7,6,6,6,5,6,7,7,6,5,7,7,5,6,5,5,7,7,6,6,7,6,5,4,6,6,6,6,5,4,6,6,6,6,7,5,6,7,7,6,7,6,5,5,6,6,7,6,6,7,6,6,6,7,6,6,6,7,6,6,6,6,6,5,6,6,6,6,6,6,6,6,5,5,6,6,6,6,6,6,7,6,6,5,6,6,5,5,3,6,6,5,6,5,6,7,6,6,6,7,7,6,6,6,6,7,7,6,8,8,7,6,6,6,6,5,7,4,6,6,6,6,4,5,5,6,6,5,7,8,8,5,6,6,6,6,6,5,7,7,6,5,6,7,7,8,7,4,6,6,6,5,6,5,6,7,5,6,7,6,6,6,6,5,6,6,7,5,6,6,6,5,7,6,6,5,6,7,6,5,6,6,4,7,6,6,5,6,5,6,7,6,5,6,5,5,5,6,6,6,6,5,6,6,6,6,7,5,6,6,6,6,6,7,6,5,6,6,6,7,5,4,6,6,6,5,6,5,6,7,7,5,6,6,6,5,6,5,6,7,6],\"legendgroup\":\"\",\"name\":\"\",\"showlegend\":true,\"values\":[6,6,6,6,6,6,6,6,6,6,5,5,5,7,5,7,6,8,6,5,8,7,8,5,6,6,6,6,6,7,6,6,6,6,5,5,5,6,5,5,6,6,6,6,6,7,4,5,6,5,6,7,7,6,6,6,6,6,6,6,6,6,5,6,6,5,7,5,8,5,6,5,5,6,8,5,7,7,5,5,6,6,5,6,5,6,6,6,5,6,6,5,7,7,7,6,6,7,4,6,5,5,5,5,5,6,5,6,6,5,6,5,5,5,5,4,6,6,5,5,5,5,5,6,6,6,5,7,7,6,5,7,5,5,5,5,6,5,7,6,5,5,6,6,6,6,6,4,7,6,7,6,6,5,6,6,6,7,8,8,7,5,5,6,5,5,6,7,5,5,6,6,4,7,5,6,4,5,4,6,6,5,5,6,5,5,6,5,8,4,6,5,6,5,5,6,5,5,5,5,5,5,5,6,4,5,5,4,5,6,5,7,5,6,7,5,5,5,5,5,5,6,7,6,6,5,6,6,6,5,4,6,6,6,6,6,6,6,7,6,5,5,7,6,5,6,7,7,7,5,4,3,5,3,6,8,7,7,6,4,6,5,5,6,6,5,6,5,6,6,6,5,5,5,5,6,6,5,4,7,8,8,4,5,5,5,6,7,7,7,7,6,5,7,3,6,5,7,6,6,6,6,6,6,6,6,5,6,7,6,7,8,6,6,5,6,6,5,7,6,7,5,6,6,5,5,6,6,6,5,8,5,6,5,5,6,6,6,5,7,7,6,6,5,6,6,7,6,6,5,7,7,6,7,6,6,6,6,6,6,6,5,6,6,7,7,6,6,6,5,6,6,5,6,7,7,7,7,6,7,7,6,6,6,7,7,7,5,6,7,7,5,6,6,5,5,5,6,5,6,6,5,5,5,6,5,7,5,6,5,6,6,5,5,6,6,6,5,6,6,7,6,6,6,7,6,6,5,5,5,5,5,7,4,8,7,5,8,7,5,7,6,8,6,6,3,5,6,6,7,5,5,7,7,7,6,7,5,6,5,5,5,5,6,5,5,6,6,5,5,6,5,6,7,6,5,7,6,6,6,5,6,5,5,5,6,6,6,6,6,6,7,6,6,6,6,4,6,5,4,6,6,6,5,6,6,5,7,6,7,6,6,6,6,7,6,5,6,6,5,5,5,6,6,5,6,4,6,6,6,6,5,6,6,6,5,5,6,5,6,4,5,6,6,6,6,6,6,7,5,7,7,7,7,7,7,5,6,5,6,7,5,6,7,5,6,6,5,6,6,5,7,5,7,7,6,6,7,7,7,5,5,6,6,7,6,6,7,7,6,5,6,5,5,5,7,5,6,8,7,6,6,5,5,6,6,5,5,5,6,8,6,5,5,5,5,7,6,6,6,5,5,6,5,5,8,4,6,6,6,5,5,6,5,6,6,7,5,5,5,7,4,6,5,5,5,4,6,5,7,7,7,7,6,7,6,6,5,5,4,5,7,4,5,6,5,6,6,6,5,6,6,8,6,5,6,6,7,7,7,5,5,6,5,5,5,7,4,6,7,4,6,5,5,6,5,6,5,5,5,5,7,4,6,6,5,5,6,6,5,5,6,6,5,6,7,6,5,7,7,5,5,6,8,7,5,7,5,5,5,6,6,7,6,5,6,6,5,7,6,3,6,6,5,5,6,6,6,6,6,6,6,6,6,5,7,5,6,7,7,6,6,5,6,6,6,5,6,7,7,7,7,7,5,9,6,6,5,7,8,4,6,7,8,5,6,6,6,7,6,6,7,5,7,5,5,6,6,6,8,6,5,5,7,6,6,5,6,6,6,5,6,7,6,6,5,5,5,5,5,9,6,5,6,5,6,6,9,7,7,6,4,8,6,6,8,8,8,8,7,7,7,7,7,8,8,5,5,7,6,7,5,7,5,7,7,5,5,7,5,8,7,6,6,5,6,7,8,7,6,5,5,6,3,5,7,9,6,6,8,7,6,6,6,6,7,6,7,6,7,6,7,5,7,7,6,6,6,6,6,7,6,5,6,8,4,4,8,4,5,5,5,5,5,4,5,7,6,6,7,7,6,6,6,8,5,5,7,5,5,7,5,6,5,5,5,5,5,6,7,5,6,7,7,7,7,5,5,4,5,5,6,6,5,6,5,5,7,7,6,6,7,6,6,6,5,6,6,7,7,7,7,6,7,6,5,6,5,7,5,6,7,6,6,5,6,6,6,5,7,6,4,5,4,6,6,5,6,6,7,7,5,6,7,6,6,6,5,7,6,6,7,6,5,5,5,5,6,6,6,7,7,8,6,6,6,6,4,7,4,6,6,6,6,3,6,5,5,7,5,4,5,4,5,7,5,5,5,5,6,5,6,5,4,5,5,6,5,6,4,7,5,5,5,6,5,6,7,7,6,7,5,7,5,6,7,6,5,5,6,7,6,6,6,7,5,8,8,6,7,6,6,6,7,5,8,6,7,6,7,6,6,5,5,5,7,8,7,7,4,7,6,6,5,4,8,5,5,5,5,6,6,7,5,5,6,7,7,5,7,6,6,5,5,5,6,8,8,5,5,6,5,5,5,5,5,5,5,6,5,5,5,4,6,4,4,6,6,6,6,6,6,7,6,6,5,5,6,5,6,6,5,6,5,6,5,7,6,5,5,5,6,5,6,7,5,5,8,6,5,6,7,6,7,6,6,7,7,6,7,6,7,5,6,6,5,6,5,6,6,6,5,6,6,6,5,8,5,8,8,6,7,6,5,7,6,7,5,6,3,6,7,7,6,6,5,6,5,7,5,6,7,7,7,5,4,7,6,7,5,7,5,6,7,5,6,6,6,6,6,6,6,6,6,5,7,8,7,5,6,7,5,5,5,6,6,7,5,6,6,6,7,5,8,7,6,7,7,7,6,6,6,6,4,4,6,6,7,6,5,6,5,6,6,5,7,8,5,6,6,6,6,5,5,6,6,6,5,6,5,6,6,6,5,6,7,6,6,6,5,5,6,7,8,6,6,8,5,5,6,6,5,6,6,8,8,7,7,8,4,7,7,6,5,5,5,6,6,8,7,6,7,7,4,5,7,6,5,6,5,6,7,6,6,7,7,6,6,7,6,7,7,6,6,6,5,7,6,7,6,6,6,6,6,7,7,7,7,7,6,7,6,8,8,5,4,8,6,7,6,6,6,8,6,6,5,6,3,5,7,4,6,5,4,6,6,6,5,7,5,4,5,7,6,5,5,5,7,5,5,5,5,5,6,6,6,6,6,6,6,6,5,6,7,5,5,6,6,6,6,6,6,6,6,8,5,6,7,5,5,7,6,5,6,4,6,5,6,6,6,6,6,6,4,3,6,6,6,6,5,6,5,5,8,8,7,5,7,6,6,7,5,5,7,8,7,6,6,6,5,5,6,7,6,7,6,6,6,6,5,6,5,5,6,6,5,6,6,6,6,5,7,7,6,6,6,5,6,6,6,6,4,6,6,5,6,6,6,6,6,6,6,7,7,7,7,6,6,4,4,6,5,7,6,5,6,5,5,6,5,5,6,6,5,4,6,6,4,5,4,5,6,7,5,6,5,5,6,5,6,6,6,6,6,6,6,5,6,6,6,6,6,5,7,5,9,6,7,5,7,6,6,7,7,5,6,6,6,6,8,7,5,6,6,7,6,6,5,6,6,5,6,8,7,6,6,5,6,5,5,5,6,7,7,7,7,6,7,5,4,7,6,4,6,5,5,5,6,5,5,6,6,7,6,4,8,5,6,7,6,6,7,5,5,6,5,7,6,6,5,5,6,7,7,7,7,5,7,3,6,4,7,6,5,6,6,6,6,6,6,6,5,4,5,5,6,6,5,4,5,5,5,6,6,5,8,6,6,4,6,7,7,6,8,6,6,6,6,5,6,6,6,5,6,6,6,5,6,5,4,6,6,6,6,5,5,5,6,5,6,6,7,6,7,6,6,5,5,5,5,6,6,7,6,5,5,5,5,5,7,6,6,6,6,6,6,5,6,8,8,5,4,6,6,7,6,7,7,5,7,5,5,6,5,5,6,5,8,6,6,6,5,6,6,6,5,5,6,5,6,6,5,6,6,7,6,7,4,6,6,6,5,7,6,5,5,5,6,6,7,7,7,7,7,6,5,6,7,6,6,5,7,6,6,6,5,5,5,5,6,7,6,7,5,7,6,4,5,5,6,6,6,7,5,6,6,6,6,7,7,6,6,5,5,5,5,6,6,6,6,5,6,5,5,5,6,5,5,5,5,5,5,5,5,5,6,6,6,6,7,6,5,6,5,6,6,5,7,7,5,5,6,6,6,6,7,5,6,6,6,7,5,5,5,4,6,6,5,6,5,6,3,6,5,6,5,6,7,5,5,5,5,5,5,5,6,6,5,7,5,5,4,7,6,5,5,5,6,6,5,5,5,5,6,5,6,6,7,6,7,6,7,5,5,5,6,5,6,6,6,8,8,8,8,8,6,6,5,6,7,4,8,5,6,6,6,6,6,6,6,5,5,6,6,6,6,6,6,5,7,6,5,5,6,5,6,7,5,7,6,6,6,6,6,5,5,5,5,6,6,6,5,6,5,5,5,6,5,5,5,6,5,6,6,6,5,5,5,5,7,3,5,5,5,5,6,5,7,5,5,5,6,5,5,6,5,5,5,6,7,6,6,5,5,6,5,5,6,6,4,5,5,6,5,6,6,5,6,6,6,5,5,5,5,5,5,5,5,6,5,5,6,5,5,5,5,5,6,6,6,5,5,5,5,6,5,4,5,6,4,5,7,5,5,7,5,5,5,6,5,5,6,6,6,6,5,6,5,5,5,5,5,5,7,6,6,6,5,5,6,6,5,6,6,4,5,4,6,6,4,6,7,6,6,5,5,5,7,7,7,7,7,5,5,7,7,5,7,5,6,6,6,5,5,6,7,5,5,6,6,6,5,6,6,6,5,6,6,5,6,5,6,5,5,5,5,6,7,5,6,7,6,6,6,5,6,5,6,6,7,6,6,7,6,7,4,5,5,7,6,7,6,6,5,5,6,5,4,6,6,5,5,5,5,5,7,4,6,6,5,6,7,5,5,6,6,5,6,5,6,5,6,6,5,6,5,5,6,6,6,7,6,6,5,7,4,6,6,6,5,6,6,5,5,5,5,5,5,5,7,7,6,6,7,7,6,7,6,8,7,7,5,5,5,6,7,5,5,5,6,5,7,5,7,6,6,7,5,4,7,6,5,6,6,5,6,5,6,5,5,6,5,6,8,5,5,5,4,5,6,6,5,8,5,6,6,4,6,6,5,5,6,6,7,6,7,6,5,5,5,6,5,6,5,5,5,5,6,6,6,7,5,4,3,6,6,6,6,5,4,4,6,8,6,8,5,4,4,4,8,8,6,7,6,5,5,5,6,6,6,4,4,6,6,5,5,6,6,5,4,6,6,4,4,4,5,6,5,5,5,7,5,5,6,5,6,6,6,6,6,5,5,5,6,6,4,5,6,5,6,5,6,5,5,5,5,5,6,6,6,5,5,7,6,5,6,6,6,6,5,5,5,5,7,5,5,5,6,6,5,5,7,6,6,7,5,6,7,6,6,5,6,6,6,5,6,5,6,6,6,6,5,6,4,4,5,5,5,5,6,5,5,4,4,6,6,6,7,6,5,6,6,6,5,7,7,6,6,7,5,5,7,8,5,5,8,7,6,6,5,6,4,4,5,7,6,6,6,6,5,5,6,5,6,6,6,5,5,6,5,5,6,5,7,7,7,5,7,7,5,6,5,6,5,6,5,7,5,6,6,5,6,5,5,5,6,5,5,7,6,5,7,7,7,7,7,7,6,7,4,6,7,5,5,7,5,5,6,5,6,7,5,6,7,7,6,6,6,6,6,5,5,7,5,5,7,7,7,7,6,5,5,7,7,5,5,7,7,6,5,6,7,5,5,5,6,5,5,6,6,6,5,5,5,6,7,7,5,6,6,5,5,7,5,5,5,4,7,7,6,6,6,6,8,7,5,7,7,6,5,7,7,7,6,7,7,6,6,5,6,6,6,6,5,6,7,6,5,6,6,6,6,6,6,6,6,6,5,6,6,7,5,5,5,6,6,6,5,6,5,5,5,5,6,6,6,5,6,6,6,7,5,7,6,6,5,6,6,6,7,5,5,5,7,6,6,6,7,5,7,6,5,6,6,6,7,6,6,8,6,8,6,6,8,5,5,6,5,6,6,6,5,5,6,6,6,6,6,6,5,7,6,7,7,8,8,8,6,7,5,5,6,6,6,6,5,6,5,5,5,6,5,5,7,5,8,7,5,7,7,5,5,6,8,8,6,5,5,6,7,7,5,6,7,7,5,5,7,4,6,5,5,5,6,6,6,6,7,7,5,5,5,6,7,6,6,6,6,7,7,6,6,6,6,5,7,7,5,5,5,5,5,5,6,6,7,7,8,7,6,6,6,6,6,6,6,7,7,5,6,7,6,7,8,7,6,5,5,6,6,5,7,5,7,7,6,5,5,4,6,8,6,5,7,7,5,5,5,5,5,6,7,5,6,7,5,5,6,6,6,5,5,7,5,6,6,6,7,6,5,4,6,8,6,6,5,8,7,7,6,8,8,6,6,5,4,5,5,8,8,6,5,5,8,6,8,6,6,6,6,5,5,5,5,7,5,6,6,5,7,7,6,5,7,5,8,6,6,5,6,5,5,6,6,6,6,6,6,6,7,7,7,6,6,6,7,7,7,7,6,7,7,7,7,7,6,8,6,7,7,7,7,7,7,6,6,6,7,7,6,5,6,6,6,6,6,6,6,8,6,6,4,5,6,6,7,6,5,6,8,8,6,5,6,6,7,5,6,6,6,5,6,6,6,6,6,6,5,6,5,4,5,7,5,6,6,5,5,5,6,5,5,8,5,5,6,5,4,6,8,8,7,6,5,5,7,5,5,5,5,6,5,6,7,6,6,7,3,6,7,6,6,6,7,6,6,7,5,7,7,7,6,6,7,5,6,6,6,5,4,6,7,5,6,6,6,7,7,7,5,6,5,6,5,6,5,7,5,6,6,6,5,6,6,6,6,5,6,6,6,6,7,6,5,6,6,6,6,6,6,6,6,6,6,6,7,5,7,7,6,6,5,7,7,6,6,6,7,6,6,6,6,8,8,8,6,6,5,6,4,6,6,5,6,7,6,4,7,8,5,7,6,6,5,5,6,7,6,7,7,7,6,7,7,5,7,7,6,5,5,5,6,5,6,6,6,5,5,4,7,5,6,6,6,6,7,6,6,6,7,6,6,5,6,6,6,6,7,5,7,6,7,6,7,7,5,6,6,7,7,6,6,8,8,5,6,6,6,6,6,6,5,7,8,6,3,6,6,6,5,5,7,7,7,5,4,8,7,5,6,5,6,7,6,6,7,7,7,6,5,5,8,5,7,6,5,5,5,6,7,5,8,6,7,7,7,7,3,6,7,7,7,7,7,6,7,6,6,7,5,5,6,7,6,6,7,5,7,5,6,6,6,7,6,6,6,6,6,6,6,6,6,5,7,6,6,6,6,6,6,6,6,6,6,7,6,6,7,6,6,7,6,6,6,6,7,6,6,6,7,6,6,6,7,5,6,6,6,8,5,7,7,7,6,6,6,8,5,6,7,6,8,6,6,5,5,6,6,5,6,6,5,6,5,6,6,6,5,6,3,7,6,6,6,7,7,6,4,6,7,5,8,8,5,6,6,6,6,6,5,6,6,5,7,6,6,6,5,5,5,5,5,7,6,5,8,6,6,7,8,7,7,5,6,5,6,5,7,7,6,6,8,6,7,5,6,6,5,8,6,8,6,6,8,6,6,8,7,6,7,8,5,8,7,8,7,6,6,6,8,7,6,7,7,6,7,7,6,6,7,7,6,5,7,7,7,6,7,5,6,6,7,6,6,6,7,7,7,5,7,5,7,5,5,6,6,6,6,4,7,5,5,6,6,5,5,6,5,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,6,6,4,6,5,6,5,6,6,6,6,7,6,6,4,6,6,6,7,5,7,4,7,5,7,6,6,7,7,7,6,6,6,7,5,7,7,7,7,7,6,7,6,6,7,6,7,6,5,5,6,6,6,5,6,6,6,5,6,5,5,7,6,7,7,6,6,7,5,5,5,6,6,6,6,6,6,7,6,7,7,7,6,6,6,6,6,7,6,7,7,5,6,4,6,6,6,6,7,7,8,7,8,8,6,4,6,8,8,7,8,5,7,6,7,8,7,5,6,7,6,5,7,6,8,7,6,7,6,5,5,6,8,7,6,7,7,5,6,7,6,6,5,5,5,6,6,6,6,6,6,5,5,5,6,5,5,4,6,5,6,5,5,7,5,5,7,6,6,7,7,7,5,6,6,5,6,5,6,4,5,6,7,7,7,7,7,7,7,5,6,5,6,7,5,5,5,8,6,5,5,5,6,6,7,5,5,8,5,5,5,6,5,4,6,6,5,5,6,5,6,7,7,5,6,6,5,6,7,5,5,5,6,5,5,6,6,5,6,6,5,5,5,5,6,5,6,5,6,5,5,6,6,3,5,5,5,5,7,5,6,6,6,5,6,6,5,7,6,6,5,6,7,7,5,5,6,5,5,6,6,5,5,6,6,6,7,6,5,6,5,6,5,6,7,6,7,6,6,6,6,6,5,5,6,6,6,7,6,6,5,6,6,6,6,4,5,5,7,5,5,5,4,6,6,5,6,6,6,6,6,6,6,6,5,5,5,6,6,6,6,7,5,5,4,6,6,7,7,7,7,7,7,6,6,7,6,7,7,6,5,7,6,6,5,7,5,5,5,6,5,5,5,6,6,8,4,6,5,6,5,6,6,5,5,6,6,6,6,6,7,5,5,5,5,6,7,5,6,5,5,6,6,6,5,7,7,5,4,6,4,6,6,7,6,6,4,6,7,7,6,7,6,5,7,7,6,7,6,6,6,6,6,6,5,7,7,7,5,7,7,6,6,6,5,6,6,7,6,6,5,6,6,6,7,6,6,6,5,5,6,6,5,4,5,5,6,6,6,6,5,6,6,5,5,5,6,5,6,5,5,5,4,5,5,7,7,7,7,7,6,6,6,7,6,5,7,7,6,5,6,6,6,5,5,6,5,5,8,6,5,6,6,5,6,7,5,4,6,5,6,6,6,6,6,6,5,8,6,6,6,6,6,6,6,6,6,7,6,5,6,5,6,6,5,5,7,7,7,5,6,6,6,5,6,6,6,6,6,6,6,8,7,5,6,6,6,7,5,5,5,5,7,6,5,5,6,6,5,6,5,6,7,6,6,6,6,6,6,7,7,6,7,5,6,6,5,5,5,5,7,7,7,7,7,7,5,5,7,7,8,6,7,7,5,6,5,6,7,6,6,7,5,6,6,6,7,7,5,5,6,6,5,6,5,6,6,6,8,6,5,5,6,6,6,6,5,6,6,6,7,6,6,6,6,4,4,5,5,5,4,6,5,6,6,4,4,7,5,7,7,6,6,6,6,6,6,6,5,5,5,5,7,6,6,7,6,5,5,6,6,6,6,6,6,6,4,5,5,5,5,6,6,6,7,6,6,6,6,7,7,6,5,6,5,6,6,6,6,7,5,4,6,6,5,5,6,6,6,6,5,6,6,5,5,6,5,5,5,6,6,6,6,5,5,6,6,6,6,6,7,6,6,6,5,6,6,7,7,5,7,7,7,5,6,7,6,6,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,6,6,6,6,6,6,7,6,5,6,6,5,6,6,6,5,6,5,6,5,6,6,5,6,5,6,5,6,6,5,5,6,6,5,6,5,6,5,5,6,6,6,6,5,5,6,6,6,4,5,5,5,6,6,5,5,5,5,5,5,6,6,5,5,5,7,6,5,7,5,7,7,7,7,5,5,6,6,6,6,6,6,6,6,6,6,5,6,6,5,6,6,5,6,6,6,6,5,5,5,6,5,5,6,6,6,6,5,6,6,5,5,6,6,5,5,5,7,5,6,6,6,6,5,5,5,5,6,6,6,6,5,5,6,6,6,5,5,5,5,5,6,4,5,6,6,6,6,6,6,6,6,6,6,6,6,5,5,6,6,6,6,7,5,5,6,5,4,5,6,6,6,6,5,6,6,6,6,6,5,5,6,5,6,6,6,6,6,6,6,6,6,5,6,6,6,5,6,5,6,6,5,5,6,6,6,6,5,5,6,6,6,6,6,5,5,6,6,7,6,6,7,7,7,5,5,5,6,6,6,7,7,6,7,7,5,6,7,6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6,5,6,7,4,6,5,5,5,5,7,5,7,7,5,6,7,7,6,6,5,6,6,6,7,7,7,6,6,6,6,5,6,5,6,6,6,7,6,6,7,7,7,5,5,5,7,5,7,7,7,7,7,6,6,6,5,6,7,7,6,5,7,7,5,6,5,5,7,7,6,6,7,6,5,4,6,6,6,6,5,4,6,6,6,6,7,5,6,7,7,6,7,6,5,5,6,6,7,6,6,7,6,6,6,7,6,6,6,7,6,6,6,6,6,5,6,6,6,6,6,6,6,6,5,5,6,6,6,6,6,6,7,6,6,5,6,6,5,5,3,6,6,5,6,5,6,7,6,6,6,7,7,6,6,6,6,7,7,6,8,8,7,6,6,6,6,5,7,4,6,6,6,6,4,5,5,6,6,5,7,8,8,5,6,6,6,6,6,5,7,7,6,5,6,7,7,8,7,4,6,6,6,5,6,5,6,7,5,6,7,6,6,6,6,5,6,6,7,5,6,6,6,5,7,6,6,5,6,7,6,5,6,6,4,7,6,6,5,6,5,6,7,6,5,6,5,5,5,6,6,6,6,5,6,6,6,6,7,5,6,6,6,6,6,7,6,5,6,6,6,7,5,4,6,6,6,5,6,5,6,7,7,5,6,6,6,5,6,5,6,7,6],\"type\":\"pie\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('caeb301c-4e12-40e7-94a8-4157e5e52113');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "round(df[['quality']].describe(),2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "PFuAipgfk8xy",
        "outputId": "0b71896c-2868-4649-ac68-44a84de5c291"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       quality\n",
              "count  4898.00\n",
              "mean      5.88\n",
              "std       0.89\n",
              "min       3.00\n",
              "25%       5.00\n",
              "50%       6.00\n",
              "75%       6.00\n",
              "max       9.00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49ebf150-21b8-4f90-92e6-7a7d7631a131\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4898.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>3.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49ebf150-21b8-4f90-92e6-7a7d7631a131')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-49ebf150-21b8-4f90-92e6-7a7d7631a131 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-49ebf150-21b8-4f90-92e6-7a7d7631a131');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1c4dd7c5-ee79-4400-b0ae-9cabcb6de00c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1c4dd7c5-ee79-4400-b0ae-9cabcb6de00c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1c4dd7c5-ee79-4400-b0ae-9cabcb6de00c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"round(df[['quality']]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1729.8994836565957,\n        \"min\": 0.89,\n        \"max\": 4898.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4898.0,\n          5.88,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Calculado os Quartis:\n",
        "q_25 = np.percentile(df['quality'], 25) #calcula o primeiro quartil\n",
        "q_50 = np.percentile(df['quality'], 50) #calcula a mediana\n",
        "q_75 = np.percentile(df['quality'], 75) #calcula o terceiro quartil\n",
        "#Visualização\n",
        "plt.figure(figsize=(6, 3))\n",
        "sns.histplot(df['quality'], kde=True, color='gray')\n",
        "plt.axvline(q_25, color='red', linestyle='dashed', linewidth=2, label='Q25')\n",
        "plt.axvline(q_50, color='blue', linestyle='dashed', linewidth=2, label='Q50')\n",
        "plt.axvline(q_75, color='green', linestyle='dashed', linewidth=2, label='Q75')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 311
        },
        "id": "7OT-29J6k8vK",
        "outputId": "f9b3a11b-f9a9-46b6-f7f8-bcc570772493"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data=df, x='pH')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "bfa7EZdYk8tJ",
        "outputId": "ba80f7c0-7dad-4bf7-9333-03bb106ff150"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data=df, x='density')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "ePJFSqwPk8q8",
        "outputId": "4b65e066-54cc-4974-9333-9dec740454f7"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,6))\n",
        "sns.histplot(data=df, x='pH', hue='quality')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "TLG-daLck8oy",
        "outputId": "90d75120-969b-4bf3-c63e-437076d96e26"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Calculado os Quartis:\n",
        "q_25 = np.percentile(df['pH'], 25)\n",
        "q_50 = np.percentile(df['pH'], 50)\n",
        "q_75 = np.percentile(df['pH'], 75)"
      ],
      "metadata": {
        "id": "ER3hjJXGk8mq"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Visualização\n",
        "plt.figure(figsize=(6, 3))\n",
        "sns.histplot(df['pH'], kde=False, color='gray')\n",
        "plt.axvline(q_25, color='red', linestyle='dashed', linewidth=2, label='Q25')\n",
        "plt.axvline(q_50, color='blue', linestyle='dashed', linewidth=2, label='Q50')\n",
        "plt.axvline(q_75, color='green', linestyle='dashed', linewidth=2, label='Q75')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 311
        },
        "id": "oQhhhpe8k8kS",
        "outputId": "75e1594f-73e6-4772-8d79-cff51525a5dd"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(6, 3))\n",
        "plt.hist(df['pH'], bins=50, color='gray');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "HUOnbJowk8iK",
        "outputId": "d6e9f37d-5b81-407c-854d-110f66b78275"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=[3,6])\n",
        "sns.boxplot(y='pH', data=df);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "pqbME66Tk8fp",
        "outputId": "8e204af8-83b9-4c6f-bae1-b818f88bba1c"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=[2,4])\n",
        "sns.boxplot(y='alcohol', data=df);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "HxJ_B6ORk8di",
        "outputId": "b4cfd0b3-163a-4682-d367-4b185a51512f"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x400 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAN4AAAFMCAYAAACkvgJLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAU4UlEQVR4nO3df0zTB/7H8dcHwcIx6AbekN5aRBE9mSLZDzcP+UJGNI2H3uXumC4HqNmMyU6nLM6h4qGONZgMnRvRcDHZ1O0yc+fIskuOmLkb/lo9Tju9+ONkdkBE5My2FphUpf3+cbG5nvwoHz7t+0N9PZJmtp9P23cmTz/9fNp+UHw+nw9EFFZR0gMQPYgYHpEAhkckgOERCWB4RAIYHpEAhkckIFp6gFDzer3o6OhAQkICFEWRHocimM/nQ3d3N0wmE6Kiht6mRXx4HR0dMJvN0mPQA6S9vR2PPfbYkOtEfHgJCQkA/vM/IzExUXgaimRutxtms9n/MzeUiA/v3svLxMREhkdhEcwuDQ+uEAlgeEQCGB6RAIZHJIDhEQlgeEQCGB6RAIZHJIDhEQlgeEQCIv4jY2NZX18f2trapMcQY7FYEBsbKz1GSDA8HWtra8PKlSulxxBTX1+PzMxM6TFCguHpmMViQX19vchzt7a2orq6Gps2bUJaWprIDBaLReR5w4Hh6VhsbKz4v/hpaWniM0QiHlwhEsDwiAQwPCIBouE1NTWhqKgIJpMJiqKgoaFh0HVXrVoFRVGwa9eusM1HFCqi4fX29iI7Oxt1dXVDrvfxxx/jyy+/hMlkCtNkRKElelTTarXCarUOuc61a9ewevVqNDY2YuHChcM+psfjgcfj8V93u92jnpNIa7rex/N6vSgpKcH69euRlZUV1H1sNhuMRqP/wlP7kR7pOryamhpER0djzZo1Qd+noqICLpfLf2lvbw/hhETq6PYN9H/84x94++23cebMmRGdAdpgMMBgMIRwMqLR0+0W79ixY+jq6oLFYkF0dDSio6PR2tqKV199FZMmTZIej2hUdLvFKykpQWFhYcBtCxYsQElJCZYvXy40FZE2RMPr6elBS0uL/7rT6YTD4UBSUhIsFguSk5MD1o+JicHEiRMxbdq0cI9KpCnR8Jqbm1FQUOC/Xl5eDgAoKyvDe++9JzQVUeiJhpefnw+fzxf0+t98803ohiEKI90eXCGKZAyPSADDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSIBoeE1NTSgqKoLJZIKiKGhoaAhYXlVVhenTpyM+Ph6PPPIICgsLYbfbZYYl0pBoeL29vcjOzkZdXd2AyzMzM/Huu+/i/PnzOH78OCZNmoT58+fj3//+d5gnJdJWtOSTW61WWK3WQZe/8MILAddra2uxb98+nDt3Ds8999yA9/F4PPB4PP7rbrdbm2GJNDRm9vFu376N+vp6GI1GZGdnD7qezWaD0Wj0X8xmcxinJAqO7sP79NNP8dBDDyE2NhY7d+7EkSNHMGHChEHXr6iogMvl8l/a29vDOC1RcERfagajoKAADocDN2/exB/+8AcUFxfDbrfj0UcfHXB9g8EAg8EQ5imJRkb3W7z4+HhkZGTgmWeewb59+xAdHY19+/ZJj0U0KroP7395vd6AgydEY5HoS82enh60tLT4rzudTjgcDiQlJSE5ORnV1dVYtGgRUlNTcfPmTdTV1eHatWv4zW9+Izg10eiJhtfc3IyCggL/9fLycgBAWVkZ9u7di0uXLuH999/HzZs3kZycjKeeegrHjh1DVlaW1MhEmhANLz8/Hz6fb9Dlhw8fDuM0ROEz5vbxiCIBwyMSwPCIBDA8IgEMj0gAwyMSwPCIBDA8IgEMj0gAwyMSwPCIBDA8IgEMj0gAwyMSwPCIBDA8IgEMj0gAwyMSwPCIBDA8IgEMj0gAwyMSwPCIBDA8IgEMj0gAwyMSwPCIBDA8IgEMj0gAwyMSwPCIBDA8IgEMj0gAwyMSIBpeU1MTioqKYDKZoCgKGhoa/Mvu3LmDDRs2YObMmYiPj4fJZEJpaSk6OjrkBibSiGh4vb29yM7ORl1d3X3LfvjhB5w5cwaVlZU4c+YMDh8+jMuXL2PRokUCkxJpK1ryya1WK6xW64DLjEYjjhw5EnDbu+++i6effhptbW2wWCwD3s/j8cDj8fivu91u7QYm0siY2sdzuVxQFAUPP/zwoOvYbDYYjUb/xWw2h29AoiCNmfD6+vqwYcMGLF26FImJiYOuV1FRAZfL5b+0t7eHcUqi4Ii+1AzWnTt3UFxcDJ/Phz179gy5rsFggMFgCNNkROroPrx70bW2tuLo0aNDbu2Ixgpdh3cvuitXruDzzz9HcnKy9EhEmhANr6enBy0tLf7rTqcTDocDSUlJSE1Nxa9//WucOXMGn376Kfr7+9HZ2QkASEpKwvjx46XGJho10fCam5tRUFDgv15eXg4AKCsrQ1VVFT755BMAwOzZswPu9/nnnyM/Pz9cYxJpTjS8/Px8+Hy+QZcPtYxoLBszbycQRRKGRySA4REJYHhEAhgekQCGRySA4REJYHhEAhgekQCGRySA4REJYHhEAoL+kPTu3buDftA1a9aoGoboQRF0eDt37gxqPUVRGB7RMIIOz+l0hnIOogfKqPfxfD4fvzdHNEKqw9u/fz9mzpyJuLg4xMXFYdasWThw4ICWsxFFLFXfQK+trUVlZSV+97vf4Wc/+xkA4Pjx41i1ahVu3ryJdevWaTokUaRRFd4777yDPXv2oLS01H/bokWLkJWVhaqqKoZHNAxV4V2/fh1z58697/a5c+fi+vXrox5Kb27cuAGXyyU9Rli1trYG/PdBYjQakZKSEtLnUBVeRkYGDh06hI0bNwbc/tFHH2Hq1KmaDKYXN27cwG9LSnHntmf4lSNQdXW19AhhFzPegIMH9oc0PlXhbd26Fc8//zyampr8+3gnTpzAZ599hkOHDmk6oDSXy4U7tz24Nfn/4I01So9DIRbV5wKufgGXy6W/8H71q1/Bbrdj586d/l8m+dOf/hSnT59GTk6OlvPphjfWCG/8BOkxKEKoPq/mE088gYMHD2o5C9EDQ3V4Xq8XLS0t6OrqgtfrDViWl5c36sGIIpmq8L788ku88MILaG1tve9TK4qioL+/X5PhiCKVqvBWrVqFJ598En/5y1+QmpoKRVG0nosooqkK78qVK/jTn/6EjIwMrecheiCo+qzmnDlzAn69FhGNTNBbvHPnzvn/vHr1arz66qvo7OzEzJkzERMTE7DurFmztJuQKAIFHd7s2bOhKErAwZQVK1b4/3xvGQ+uEA2PX4QlEhB0eGlpaaGcg+iBovoN9K+//hq7du3CxYsXAQAzZszAK6+8gilTpmg2HFGkUnVUs7GxETNmzMDp06cxa9YszJo1C3a7HVlZWThy5EjQj9PU1ISioiKYTCYoiuL/3Oc9hw8fxvz585GcnAxFUeBwONSMS6Q7qsJ7/fXXsW7dOtjtdtTW1qK2thZ2ux1r167Fhg0bgn6c3t5eZGdno66ubtDlubm5qKmpUTMmkW6peql58eLFAb/+s2LFCuzatSvox7FarbBarYMuLykpAQB88803Ix2RSNdUbfF+/OMfD/iyz+Fw4NFHHx3tTKPi8XjgdrsDLkR6o2qL99JLL2HlypW4evWq/xQQJ06cQE1NDcrLyzUdcKRsNhu2bt0qOgPRcFSFV1lZiYSEBLz11luoqKgAAJhMJlRVVYmfRbqioiIgfrfbDbPZLDgR0f1UhacoCtatW4d169ahu7sbAJCQkKDpYGoZDAYYDAbpMYiGpCo8p9OJu3fvYurUqQHBXblyBTExMZg0aZJW8xFFJFUHV5YtW4aTJ0/ed7vdbseyZcuCfpyenh44HA7/gRqn0wmHw4G2tjYAwLfffguHw4ELFy4AAC5fvgyHw4HOzk41YxPphqrwzp496z+72H975plnRvQmd3NzM3JycvwnSCovL0dOTg62bNkCAPjkk0+Qk5ODhQsXAgCWLFmCnJwc7N27V83YRLqheh/v3r7df3O5XCP6ZkJ+fv6Qv/Bk2bJlI9qCEo0VqrZ4eXl5sNlsAZH19/fDZrMhNzdXs+GIIpWqLV5NTQ3y8vIwbdo0zJs3DwBw7NgxuN1uHD16VNMBiSKRqi3ejBkzcO7cORQXF6Orqwvd3d0oLS3FpUuX8Pjjj2s9I1HEUf21IJPJhDfffFPLWYgeGKrOuTIcnnOFaGijOufKQHjOFaLh8ZwrRAJGdc6VCxcuoK2tDbdv3/bfpigKz89CNAxVB1euXr2KX/7ylzh//nzAy897p3LnS02ioal6O+GVV15Beno6urq68KMf/Qj//Oc/0dTUhCeffBJ/+9vfNB6RKPKo2uKdOnUKR48exYQJExAVFYVx48YhNzcXNpsNa9aswdmzZ7WekyiiqNri9ff3+78ONGHCBHR0dAD4z37g5cuXtZuOKEKp2uI9/vjj+Oqrr5Ceno45c+Zgx44dGD9+POrr6zF58mStZySKOKrC27x5M3p7ewEA27Ztw89//nPMmzcPycnJ+OijjzQdkCgSqQpvwYIF/j9nZGTg0qVL+Pbbb/HII4/wl1QSBUH1ZzX/V1JSklYPRRTxVB1cIaLRYXhEAhgekQDN9vEiXdSt76VHoDAI198zwwtSnLNJegSKIAwvSLfS8+CNe1h6DAqxqFvfh+UfWYYXJG/cw/DGT5AegyIED64QCWB4RAIYHpEAhkckgOERCWB4RAIYHpEAhkckgOERCWB4RAIYHpEA0fCamppQVFQEk8kERVHQ0NAQsNzn82HLli1ITU1FXFwcCgsLceXKFZlhiTQkGl5vby+ys7NRV1c34PIdO3Zg9+7d2Lt3L+x2O+Lj47FgwQL09fWFeVIibYl+O8FqtcJqtQ64zOfzYdeuXdi8eTMWL14MANi/fz9SUlLQ0NCAJUuWhHNUIk3pdh/P6XSis7MThYWF/tuMRiPmzJmDU6dODXo/j8cDt9sdcCHSG92G19nZCQBISUkJuD0lJcW/bCA2mw1Go9F/MZvNIZ2TSA3dhqdWRUUFXC6X/9Le3i49EtF9dBvexIkTAQA3btwIuP3GjRv+ZQMxGAxITEwMuBDpjW7DS09Px8SJE/HZZ5/5b3O73bDb7Xj22WcFJyMaPdGjmj09PWhpafFfdzqdcDgcSEpKgsViwdq1a/HGG29g6tSpSE9PR2VlJUwmE37xi1/IDU2kAdHwmpubUVBQ4L9eXl4OACgrK8N7772H1157Db29vVi5ciW+//575Obm4q9//StiY2OlRibShGh4+fn5/t+fPhBFUbBt2zZs27YtjFMRhZ5u9/GIIhnDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSADDIxLA8IgEMDwiAQyPSADDIxIg+rWgsSSqzyU9AoVBuP6eGd4wjEYjYsYbgKtfSI9CYRIz3gCj0RjS52B4w0hJScHBA/vhcj1YW7zW1lZUV1dj06ZNSEtLkx4nrIxG432nldQawwtCSkpKyP8i9CotLQ2ZmZnSY0QcHlwhEsDwiAQwPCIBDI9IAMMjEsDwiAQwPCIBDI9IAMMjEsDwiAQwPCIBDI9IAMMjEsDwiAQwPCIBDI9IgO7D6+7uxtq1a5GWloa4uDjMnTsXf//736XHIhoV3Yf34osv4siRIzhw4ADOnz+P+fPno7CwENeuXZMejUg1XYd369Yt/PnPf8aOHTuQl5eHjIwMVFVVISMjA3v27JEej0g1XZ9z5e7du+jv70dsbGzA7XFxcTh+/PiA9/F4PPB4PP7rbrc7pDMSqaHrLV5CQgKeffZZbN++HR0dHejv78fBgwdx6tQpXL9+fcD72Gw2GI1G/8VsNod5aqLh6To8ADhw4AB8Ph9+8pOfwGAwYPfu3Vi6dCmiogYevaKiAi6Xy39pb28P88REw9P1S00AmDJlCr744gv09vbC7XYjNTUVzz//PCZPnjzg+gaDAQaDIcxTEo2M7rd498THxyM1NRXfffcdGhsbsXjxYumRiFTT/RavsbERPp8P06ZNQ0tLC9avX4/p06dj+fLl0qMRqab7LZ7L5cLLL7+M6dOno7S0FLm5uWhsbERMTIz0aESq6X6LV1xcjOLiYukxiDSl+y0eUSRieEQCGB6RAIZHJIDhEQlgeEQCGB6RAIZHJIDhEQlgeEQCGB6RAIZHJIDhEQlgeEQCGB6RAIZHJIDhEQlgeEQCGB6RAIZHJIDhEQlgeEQCGB6RAIZHJIDhEQlgeEQCGB6RAIZHJIDhEQlgeEQCGB6RAIZHJIDhEQlgeEQCGB6RAF2H19/fj8rKSqSnpyMuLg5TpkzB9u3b4fP5pEcjGpVo6QGGUlNTgz179uD9999HVlYWmpubsXz5chiNRqxZs0Z6PCLVdB3eyZMnsXjxYixcuBAAMGnSJPzxj3/E6dOnB72Px+OBx+PxX3e73SGfM1T6+vrQ1tYm8tytra0B/5VgsVgQGxsr9vyhpOvw5s6di/r6evzrX/9CZmYmvvrqKxw/fhy1tbWD3sdms2Hr1q1hnDJ02trasHLlStEZqqurxZ67vr4emZmZYs8fSopPxztMXq8XGzduxI4dOzBu3Dj09/ejuroaFRUVg95noC2e2WyGy+VCYmJiOMbWjOQWTw/G2hbP7XbDaDQG9bOm6y3eoUOH8MEHH+DDDz9EVlYWHA4H1q5dC5PJhLKysgHvYzAYYDAYwjxpaMTGxkbsv/gPOl2Ht379erz++utYsmQJAGDmzJlobW2FzWYbNDyisUDXbyf88MMPiIoKHHHcuHHwer1CExFpQ9dbvKKiIlRXV8NisSArKwtnz55FbW0tVqxYIT0a0ajo+uBKd3c3Kisr8fHHH6OrqwsmkwlLly7Fli1bMH78+KAeYyQ7vESjMZKfNV2HpwWGR+Eykp81Xe/jEUUqhkckgOERCWB4RAIYHpEAXb+Pp4V7B23H8rcUaGy49zMWzBsFER9ed3c3AMBsNgtPQg+K7u5uGI3GIdeJ+PfxvF4vOjo6kJCQAEVRpMcZM+59q6O9vZ3vfwbJ5/Ohu7sbJpPpvo86/q+ID4/U4QcPQosHV4gEMDwiAQyPBmQwGPD73/8+Yr5UrDfcxyMSwC0ekQCGRySA4REJYHhEAhgekQCGRySA4REJYHhEAv4f2KbgzB6Id1QAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plt.figure(figsize=[2,4])\n",
        "sns.boxplot(y='density', data=df);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "Hp4QL_5Xlg3U",
        "outputId": "0ec2c4df-91b2-4ada-d63c-4834c8d8dcc1"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=[2,4]);\n",
        "fig=px.box(df,y='pH');\n",
        "fig\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "7wSRAaOulg1U",
        "outputId": "9842b499-f5f7-4b24-caac-31c7e634c752"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"5ae4ab33-d434-4a12-a9db-1e121964e7d3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"5ae4ab33-d434-4a12-a9db-1e121964e7d3\")) {                    Plotly.newPlot(                        \"5ae4ab33-d434-4a12-a9db-1e121964e7d3\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"pH=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x0\":\" \",\"xaxis\":\"x\",\"y\":[3.0,3.3,3.26,3.19,3.19,3.26,3.18,3.0,3.3,3.22,2.99,3.14,3.18,3.54,2.98,3.25,3.24,3.33,3.12,3.22,3.33,3.17,3.47,3.05,3.42,3.25,3.45,3.38,3.19,3.1,3.2,3.47,3.19,3.42,3.37,3.19,3.24,3.13,3.21,3.21,3.11,3.1,3.13,3.22,3.24,3.16,3.27,3.25,3.13,3.36,3.35,3.34,3.32,3.31,3.05,3.13,3.09,3.3,3.11,3.36,3.03,3.3,3.02,3.11,3.15,3.22,3.22,3.14,3.33,3.13,3.1,3.32,3.69,2.95,3.33,3.13,3.26,3.31,2.94,3.27,3.39,3.21,3.17,3.33,3.11,3.12,3.09,3.22,3.11,3.12,3.09,3.12,3.26,3.25,3.21,3.04,3.14,2.95,2.89,3.14,3.0,3.4,3.34,2.99,3.0,3.2,3.4,3.16,3.16,3.27,2.89,3.04,3.01,3.22,3.22,3.63,3.31,3.19,3.01,3.04,3.22,3.01,3.29,3.29,3.21,3.27,3.14,3.45,3.3,3.31,3.39,3.45,3.23,3.24,3.19,3.26,3.12,3.16,3.15,3.23,3.3,3.16,3.21,3.18,3.12,3.0,3.28,3.38,3.38,2.99,3.12,3.14,2.99,3.14,3.06,2.89,2.89,3.29,3.36,3.36,3.29,2.98,3.28,2.89,3.15,3.16,3.14,3.08,3.08,2.87,3.12,3.13,3.03,3.35,3.09,3.11,3.03,3.28,3.11,3.19,3.19,3.09,2.93,3.18,3.02,3.02,3.12,3.15,3.26,3.09,3.09,2.93,3.02,3.36,3.02,3.02,3.01,3.13,3.1,3.13,3.15,3.1,3.2,3.33,3.28,3.15,3.21,2.99,3.32,3.22,3.31,3.32,3.21,3.44,3.3,3.31,3.03,3.31,3.31,3.04,3.03,3.0,3.3,3.42,3.39,3.32,3.5,3.17,3.5,3.32,3.37,3.34,3.31,3.09,3.09,3.09,3.09,3.27,3.34,3.48,3.2,3.13,3.15,3.3,3.14,3.37,3.16,3.25,3.25,3.38,3.72,3.02,3.14,3.53,3.21,3.32,3.27,3.27,3.32,3.28,3.32,2.93,3.17,3.08,3.1,2.93,3.25,3.34,3.34,3.34,3.25,3.33,3.29,3.24,3.05,3.14,3.14,2.89,3.05,3.26,3.19,3.3,3.08,3.19,3.12,3.08,3.22,2.98,2.98,2.98,2.98,3.52,2.96,3.44,3.23,3.37,3.09,3.19,3.17,3.15,3.27,3.13,3.27,3.32,3.2,3.2,3.2,3.2,3.2,3.21,3.4,3.53,3.36,3.29,3.29,3.09,3.21,3.19,3.52,3.54,3.61,3.19,3.21,3.16,3.02,3.18,2.96,3.19,3.23,3.17,3.36,3.2,3.28,3.11,3.25,3.28,3.32,3.28,3.45,3.43,3.19,3.2,3.18,3.29,3.29,3.28,3.36,3.2,3.15,3.15,3.27,3.03,3.14,3.03,3.25,2.89,2.89,3.15,3.0,3.2,3.28,3.15,3.4,2.89,3.49,3.4,3.49,3.12,3.17,3.17,3.12,3.17,3.34,3.1,3.51,3.51,3.32,3.15,3.22,3.32,3.15,3.1,3.12,3.1,3.38,3.51,3.48,3.12,3.39,3.18,3.18,3.1,3.36,3.08,3.19,3.18,3.09,3.46,3.35,3.3,3.46,3.19,3.23,3.07,3.24,3.18,3.39,3.17,3.26,3.09,2.97,3.3,3.16,3.16,2.97,3.3,3.19,3.1,3.19,3.31,3.16,3.25,3.25,3.25,3.34,3.25,3.25,3.09,3.06,3.1,3.09,3.21,3.18,3.07,3.35,3.38,3.27,3.35,3.18,3.26,3.29,3.3,3.43,3.26,3.2,3.24,3.53,3.44,3.44,3.48,3.03,3.24,3.46,3.41,3.48,3.44,3.3,2.95,3.29,3.37,2.95,3.22,3.35,3.17,3.16,2.95,3.22,3.17,3.16,3.09,3.0,3.14,3.25,3.36,3.24,3.03,2.99,3.11,2.97,3.32,3.22,3.33,3.34,3.22,3.29,3.47,3.46,3.1,3.34,3.13,3.09,3.25,3.18,3.2,3.37,3.33,3.08,3.29,3.27,3.08,3.08,3.12,3.2,3.19,3.06,3.06,3.01,3.64,3.44,3.64,3.21,3.11,3.16,3.21,3.17,3.37,3.08,3.0,3.43,3.19,3.05,3.05,3.03,3.03,3.37,3.09,3.04,3.36,3.44,3.56,3.43,3.06,3.01,3.01,3.01,3.09,3.09,3.01,3.31,3.37,3.46,3.16,3.34,3.22,3.21,3.49,3.49,3.3,3.49,3.16,3.07,2.93,3.0,3.07,3.0,2.93,2.98,3.32,3.25,3.01,3.12,3.24,3.09,3.08,3.2,3.12,3.13,3.08,3.08,3.19,3.05,3.32,3.04,3.16,3.17,3.13,3.13,3.15,3.32,3.38,3.05,3.35,3.13,2.86,3.42,2.86,3.13,3.47,3.42,3.19,2.94,3.32,3.2,2.97,2.97,3.45,3.2,3.17,3.35,3.08,3.11,2.88,2.97,2.97,2.99,2.99,3.43,3.43,3.34,3.48,3.25,3.09,2.99,3.0,3.0,2.99,3.21,3.23,3.23,3.12,3.18,2.85,3.36,3.23,3.26,3.33,3.32,3.23,3.23,3.18,3.22,3.22,3.26,3.33,3.43,3.49,3.41,3.1,3.3,3.3,3.34,3.25,3.36,3.31,3.31,3.24,3.09,3.16,3.16,3.07,3.07,3.07,3.07,3.34,3.33,3.11,3.04,3.25,3.24,3.15,3.15,3.37,3.4,3.15,3.35,3.28,3.35,3.35,3.35,3.18,3.14,3.29,3.38,3.36,3.08,3.19,3.23,3.42,3.42,3.42,3.17,3.06,3.24,3.12,3.03,3.25,3.3,3.08,3.14,3.26,3.31,3.17,3.17,3.17,3.16,3.23,3.23,3.06,3.06,3.06,3.06,3.41,3.22,3.12,3.42,2.89,3.15,3.13,3.11,3.14,3.35,3.1,3.1,3.32,3.41,3.49,3.06,2.96,3.49,3.45,3.02,3.5,3.37,3.26,3.14,3.15,3.37,2.99,3.35,3.12,3.35,3.25,3.01,3.02,3.28,3.14,3.02,3.28,3.17,3.14,3.31,3.44,3.28,3.33,3.17,3.26,3.22,3.04,3.3,3.04,3.04,3.15,3.16,3.22,3.09,3.25,3.42,3.4,3.3,3.3,3.3,3.3,3.0,3.37,3.22,2.94,3.08,3.21,3.42,3.42,3.41,3.12,3.12,3.4,3.2,3.24,3.02,3.12,3.37,3.28,3.37,3.08,3.37,3.28,3.12,3.27,3.27,3.27,3.46,3.27,3.27,3.39,3.1,3.39,3.03,3.09,3.02,3.28,3.42,3.34,3.06,3.19,3.07,3.41,3.22,3.06,3.17,3.16,3.15,3.17,3.19,3.21,3.42,3.38,3.03,3.01,3.16,3.2,3.01,3.2,3.41,2.96,3.3,3.34,3.16,3.26,3.33,3.28,3.16,3.16,3.72,3.05,3.36,3.18,3.72,3.14,3.25,3.25,3.25,3.16,3.16,3.12,3.12,3.21,3.3,3.3,3.02,3.08,3.12,3.31,3.21,3.1,3.27,3.06,3.27,3.49,3.1,3.1,3.17,3.18,3.22,3.29,3.36,3.24,3.35,3.12,3.27,3.24,3.28,3.19,3.04,3.06,3.06,2.89,3.35,3.2,3.28,3.19,3.23,3.41,3.2,3.19,3.13,3.13,3.35,3.4,3.19,3.37,3.19,3.37,3.3,3.42,3.58,3.12,3.42,3.23,3.22,3.08,3.05,3.22,3.32,3.25,3.08,3.2,3.02,3.06,3.08,3.28,3.32,3.08,3.15,3.15,3.15,3.36,3.24,3.36,3.36,2.93,3.06,2.94,3.55,3.13,3.13,3.17,3.45,3.28,3.36,3.02,3.58,3.15,3.14,3.08,3.18,3.26,3.08,3.12,3.08,3.15,3.36,3.06,3.14,3.25,3.54,3.14,3.28,3.52,2.96,2.96,3.36,3.18,3.08,3.08,3.23,2.99,3.08,3.08,3.07,3.39,3.39,3.03,3.03,3.13,3.03,3.37,3.28,3.15,3.13,3.24,3.34,3.33,3.38,3.32,3.24,3.34,3.32,3.12,3.51,3.25,3.39,3.12,3.12,3.39,3.5,3.41,3.44,3.42,3.12,3.12,3.44,3.06,2.95,3.14,3.19,3.38,3.25,3.05,3.29,3.31,3.05,3.05,3.15,3.09,3.09,3.31,3.34,3.42,3.34,3.32,3.37,3.08,3.11,3.24,3.15,3.19,3.66,3.03,2.98,3.11,2.95,3.21,3.11,3.11,3.25,3.13,3.51,3.38,3.32,3.09,3.41,3.19,3.48,3.35,3.49,3.49,2.87,3.16,3.54,3.21,3.37,3.05,3.22,3.01,3.24,2.95,3.16,3.14,3.29,3.07,3.03,3.31,3.1,3.03,2.99,3.12,3.07,2.96,3.51,3.41,3.51,3.3,3.09,3.34,3.31,3.3,3.37,3.22,3.08,3.1,2.96,3.35,3.0,3.22,2.96,2.97,3.17,3.22,3.37,3.18,3.49,3.29,3.43,3.28,3.28,3.03,3.36,3.06,3.55,3.17,3.03,3.19,3.01,3.05,3.42,3.1,3.09,3.59,3.32,3.36,3.31,3.39,3.28,3.27,3.44,3.12,3.06,3.51,3.55,3.3,3.21,3.04,3.3,3.06,3.52,3.28,3.26,3.13,3.29,3.31,3.29,3.28,3.54,3.17,3.35,2.93,2.96,3.2,3.12,3.23,3.27,3.06,3.19,3.2,3.17,2.99,3.25,3.44,3.4,3.42,3.14,2.99,3.14,3.17,3.14,3.25,3.26,3.14,3.03,3.17,3.2,3.14,3.13,3.14,3.31,3.5,3.47,3.42,3.16,3.16,3.27,3.16,3.29,3.16,3.15,3.27,3.07,3.52,3.23,3.22,3.21,3.29,3.38,3.14,3.01,3.42,3.41,3.0,3.36,3.46,2.97,3.23,3.14,3.12,3.42,3.21,3.18,3.12,3.09,3.25,3.13,3.1,3.01,3.16,2.96,3.36,3.33,3.03,3.16,3.36,2.96,3.0,3.3,3.3,3.1,3.48,3.48,3.19,2.94,3.1,3.42,3.23,2.96,3.29,3.23,3.48,2.74,3.17,3.04,2.94,3.02,3.04,3.33,3.51,3.16,3.17,3.26,3.14,3.26,3.1,3.23,3.2,3.06,3.17,3.16,3.38,3.42,3.03,3.14,3.17,3.07,3.19,3.45,3.4,2.98,3.07,3.29,2.92,3.18,3.25,3.32,3.15,3.82,3.13,3.12,3.29,3.08,3.81,3.33,3.28,3.08,3.06,3.06,3.32,3.33,2.92,3.46,3.46,2.99,3.21,3.04,3.07,3.21,3.21,3.2,3.21,3.07,3.22,3.21,3.04,3.33,3.29,3.02,2.99,3.02,3.07,2.99,3.02,3.06,3.02,3.15,3.38,3.14,3.04,3.5,3.0,3.0,3.04,3.32,3.19,3.3,2.96,2.93,3.22,3.3,3.05,2.95,3.33,3.13,2.98,3.02,3.02,3.46,3.23,2.94,3.08,3.15,3.1,3.04,3.32,3.54,3.03,3.04,3.23,3.54,3.44,3.25,3.2,3.12,3.12,3.37,2.85,2.85,3.4,3.15,3.09,3.21,3.65,3.26,3.29,3.29,2.99,3.27,3.04,2.99,3.51,3.26,3.39,3.21,3.15,3.26,2.96,3.29,3.28,3.65,3.29,3.43,2.92,3.32,3.15,3.28,3.36,3.52,3.59,3.19,3.22,2.92,3.33,3.25,3.15,3.32,2.9,3.25,3.1,2.87,2.87,3.14,3.28,3.15,3.16,3.35,3.1,3.38,3.54,3.12,3.24,3.23,3.77,3.42,3.28,3.2,3.06,3.49,3.26,3.28,3.31,3.42,3.09,3.2,3.04,3.04,3.19,3.04,3.17,3.3,3.34,2.9,3.15,3.01,2.91,3.04,3.14,3.31,3.19,3.25,3.14,3.29,3.36,3.36,3.04,3.13,3.07,3.1,3.27,3.32,3.06,3.14,3.25,3.05,3.13,3.0,3.3,3.0,3.3,3.1,3.07,3.13,3.17,2.99,3.0,3.23,3.16,3.03,3.16,3.08,3.24,3.14,3.25,3.38,3.23,3.23,3.2,3.14,3.01,3.14,3.14,2.99,3.0,3.38,3.25,3.31,3.24,3.28,3.56,3.23,3.06,3.16,3.46,3.2,3.13,3.19,3.01,3.14,3.14,3.15,3.21,2.99,3.46,3.22,3.05,2.99,3.32,3.46,3.37,3.62,2.99,3.14,2.98,3.3,3.51,3.18,2.99,3.55,3.06,3.14,3.13,3.14,3.13,3.41,3.13,3.16,3.22,2.99,3.05,3.13,3.27,3.26,3.04,3.1,3.22,3.55,3.16,3.23,3.02,2.99,3.01,2.99,3.14,3.02,3.02,3.04,3.05,3.05,3.13,3.25,3.34,3.28,3.04,3.15,3.04,3.15,3.28,3.04,3.1,3.14,3.24,3.38,3.03,2.91,3.13,3.21,3.24,3.38,3.16,3.23,3.2,2.91,3.18,3.13,3.12,3.34,3.03,3.18,3.09,3.32,3.43,3.29,3.45,3.08,3.18,3.27,2.96,3.29,3.15,3.3,3.29,3.15,3.14,3.06,3.33,3.52,3.21,3.21,3.52,3.54,3.16,2.88,3.63,3.32,3.31,3.58,3.22,3.18,2.94,3.03,3.58,3.21,3.02,3.11,3.21,3.02,3.35,3.08,3.34,3.13,3.13,2.95,3.24,3.15,3.24,3.27,3.11,2.95,3.08,3.28,3.32,3.24,3.37,3.07,3.34,2.98,3.09,3.07,3.12,3.03,3.26,3.14,3.4,3.09,3.22,3.14,3.41,3.03,3.13,3.11,3.36,3.09,3.38,3.31,3.13,3.19,2.94,3.23,3.19,3.41,3.2,3.03,3.26,3.21,3.13,2.96,3.1,3.21,3.27,3.42,3.09,3.42,3.17,3.27,3.05,3.4,3.65,3.08,3.12,3.24,3.15,3.11,3.09,3.19,3.26,3.12,3.16,3.17,3.23,2.92,3.15,3.27,3.41,3.25,2.95,3.12,3.14,3.2,3.4,3.2,3.2,3.3,3.17,3.4,3.11,3.36,3.33,3.22,3.74,3.12,3.12,3.06,3.12,3.46,3.06,3.55,3.27,3.11,3.12,3.28,3.25,3.37,3.25,3.08,3.32,3.28,3.38,3.44,3.14,3.25,3.16,3.16,3.41,3.41,3.45,3.36,3.44,3.08,3.24,3.22,3.3,3.07,3.32,3.26,3.1,3.16,3.38,3.46,3.5,3.24,3.32,3.47,3.29,3.23,3.48,3.07,3.2,2.94,3.36,3.14,2.99,3.39,3.29,3.14,3.39,3.24,2.91,3.14,3.18,3.14,3.23,3.1,3.16,3.14,3.23,3.28,3.2,3.11,3.38,3.24,3.42,3.31,3.14,3.22,3.17,2.8,3.17,3.31,3.16,3.46,3.4,3.22,3.17,3.17,3.28,3.17,3.16,3.04,3.34,3.04,3.04,3.16,3.24,3.56,3.34,3.42,3.42,3.24,3.49,3.05,3.27,3.33,3.05,3.07,3.33,3.16,3.08,3.15,3.36,3.2,3.27,3.32,3.16,3.19,3.27,3.06,3.39,3.08,3.07,3.06,3.39,3.08,3.16,3.15,3.28,3.16,3.28,3.18,3.15,3.29,3.19,3.0,3.09,3.36,3.19,3.38,3.19,3.09,3.07,3.0,3.36,3.22,3.42,3.22,3.36,3.36,3.12,3.12,3.13,3.12,3.13,3.6,2.99,3.04,3.27,3.44,3.04,3.42,3.27,3.07,3.33,3.29,3.27,3.07,3.27,2.98,3.25,3.2,3.29,3.6,3.28,3.29,3.14,3.11,3.14,3.13,3.14,3.32,3.14,3.24,3.24,3.43,3.12,3.34,3.1,3.15,3.04,3.31,3.34,3.09,3.09,3.06,3.38,3.18,3.08,3.03,3.06,3.18,3.06,3.18,3.18,3.4,3.06,3.2,3.37,3.34,3.14,3.18,3.18,3.3,3.3,3.14,2.93,2.9,2.9,3.29,3.29,2.72,2.96,2.93,3.01,2.93,2.9,3.16,3.12,2.93,3.21,3.08,3.04,2.96,3.09,3.0,2.93,3.08,3.04,3.17,3.24,3.03,3.21,3.29,2.97,3.15,3.16,3.16,3.05,3.23,3.08,3.04,3.24,2.89,3.0,3.23,3.08,3.04,3.23,3.33,3.14,2.93,3.14,2.93,3.18,3.02,2.99,3.6,3.02,3.34,3.04,2.96,3.02,3.01,3.37,2.96,2.89,3.37,3.29,2.96,2.79,2.79,2.9,3.17,2.96,3.19,3.03,3.12,3.09,3.43,3.53,3.23,3.53,3.15,3.17,3.17,3.24,3.57,3.25,3.19,3.09,3.14,3.14,3.14,3.14,3.14,3.2,3.2,3.12,3.11,3.08,3.24,3.14,3.5,3.13,3.34,3.34,3.34,3.34,3.34,3.13,3.19,3.18,3.36,3.13,3.42,3.34,3.34,3.34,3.52,3.18,3.23,3.52,3.37,3.22,2.94,3.11,3.3,2.94,3.25,3.22,3.19,3.23,3.11,3.23,3.07,3.08,3.09,3.13,3.1,3.11,3.06,3.14,3.24,3.41,3.25,2.97,3.8,3.14,3.34,3.08,3.22,3.34,3.34,2.97,3.28,3.08,3.38,3.14,3.14,3.39,2.93,3.3,3.3,3.01,3.01,3.07,3.3,3.36,3.12,3.13,3.22,3.32,3.16,3.6,3.3,3.15,3.16,3.16,3.44,3.22,3.26,3.26,3.27,3.31,3.3,3.6,3.3,3.52,3.68,3.32,3.3,3.22,3.15,2.85,3.29,3.29,3.14,3.12,3.22,3.29,3.16,3.17,3.34,2.94,2.94,3.4,3.19,3.36,3.42,3.63,3.36,3.19,3.18,3.12,3.63,3.19,3.02,3.16,3.42,3.12,3.3,3.3,3.3,3.38,3.12,3.3,3.14,3.21,3.43,3.2,3.05,3.19,3.39,3.05,3.19,3.2,3.31,3.1,3.43,3.27,3.35,3.37,3.37,2.99,3.25,3.38,3.25,3.38,3.27,3.05,3.27,3.27,3.1,3.4,3.17,3.4,3.44,3.1,3.05,3.24,3.18,3.27,3.2,3.27,3.12,3.11,3.05,3.01,3.52,3.3,3.47,3.23,2.77,3.01,2.96,3.18,3.18,3.14,3.14,3.14,3.14,3.14,3.23,3.15,3.14,3.14,3.23,3.25,3.15,3.22,3.4,3.11,3.24,3.22,3.29,3.19,3.08,3.11,3.35,2.92,3.31,3.09,3.27,2.92,3.35,3.11,3.1,3.09,3.16,3.24,3.25,3.23,3.16,3.21,3.22,3.26,3.0,3.15,3.19,3.17,3.18,3.63,3.17,3.52,3.19,3.13,3.32,3.21,3.44,3.28,2.98,3.13,3.06,3.42,3.06,3.03,3.08,3.07,2.92,3.21,2.92,3.21,2.96,3.35,3.17,3.32,3.16,3.13,3.6,3.32,3.16,3.16,3.05,3.54,3.13,3.16,3.13,3.6,3.28,3.23,3.08,3.54,3.16,3.23,3.14,3.38,2.97,3.11,3.24,3.11,3.24,3.18,3.06,3.11,3.52,3.11,3.08,3.52,3.47,3.07,3.53,3.39,3.4,3.35,3.53,3.04,3.17,3.53,3.17,3.08,3.61,3.61,3.06,3.06,3.06,3.06,3.17,3.17,3.06,3.16,3.52,3.1,3.18,3.16,3.38,3.23,3.29,3.24,3.34,3.38,3.34,3.45,3.21,3.23,3.06,3.33,3.21,2.93,3.11,3.14,2.93,3.34,3.11,3.33,3.31,3.4,3.25,3.16,3.17,3.59,3.1,3.79,3.24,3.35,3.22,3.13,3.11,3.13,3.11,3.19,3.25,2.95,3.47,3.45,3.44,3.18,3.29,3.15,3.48,3.22,3.49,3.48,3.21,3.4,3.22,3.11,3.08,3.0,2.95,3.06,3.47,3.11,3.13,3.39,3.43,3.25,3.3,3.2,3.05,3.03,3.17,3.28,3.49,3.42,3.59,3.19,3.12,3.15,3.25,3.68,3.59,3.21,3.28,3.05,3.3,3.38,3.3,3.29,3.1,3.49,3.49,3.5,3.24,3.28,3.24,3.05,3.29,3.29,3.06,3.38,3.43,3.13,3.25,3.25,3.29,3.54,2.98,3.17,3.15,3.66,3.09,3.1,3.12,2.96,3.04,3.16,3.17,3.34,3.1,3.35,3.38,3.05,3.47,3.35,3.53,2.98,3.38,3.15,3.16,3.39,3.05,3.26,3.56,3.36,3.56,3.36,3.27,3.14,3.27,3.14,3.22,3.23,3.21,3.11,3.02,3.17,3.17,3.13,3.17,3.48,3.14,3.17,3.0,3.15,3.0,3.15,3.15,3.43,3.36,3.45,3.28,3.28,3.38,3.53,3.3,3.07,3.19,3.19,3.07,3.08,3.08,2.89,2.89,3.47,3.08,2.98,2.98,3.2,3.25,3.21,3.1,3.54,3.13,3.11,3.32,3.22,3.08,3.32,3.19,3.37,3.24,3.1,3.19,3.19,3.17,3.1,3.02,2.97,2.97,3.19,3.33,3.21,3.19,3.16,3.16,3.19,3.11,3.27,3.27,3.32,3.27,3.14,3.17,3.17,3.21,3.2,3.22,3.35,3.33,3.12,3.26,3.19,3.28,3.07,3.36,3.02,3.27,3.14,3.02,3.24,3.18,3.36,3.17,3.22,3.18,3.17,3.36,3.27,3.38,3.24,3.38,3.16,3.16,3.21,3.17,3.08,3.15,3.28,3.28,3.41,3.13,3.08,3.13,3.15,3.24,3.25,3.32,3.21,3.2,3.09,3.21,3.2,3.07,3.13,3.14,3.13,3.0,3.14,3.13,3.2,3.06,3.08,3.06,3.2,2.95,3.13,3.15,3.34,3.16,3.33,3.34,3.23,3.46,3.15,3.18,3.04,3.18,3.18,3.4,3.1,3.2,3.0,3.0,3.0,3.0,3.0,3.0,3.22,3.0,3.2,3.34,3.46,3.2,3.22,3.48,3.24,3.23,3.18,3.23,3.34,3.18,3.31,3.18,3.31,3.31,3.2,3.48,3.13,3.12,3.2,3.18,3.19,3.31,3.07,3.39,3.28,3.28,3.28,3.22,3.1,3.14,3.07,3.22,3.28,3.39,3.34,3.44,3.37,3.47,3.56,3.3,3.26,3.13,3.2,2.96,3.1,3.2,2.96,3.28,3.05,3.14,3.24,3.17,3.22,3.15,3.33,3.7,3.24,3.33,3.15,3.11,3.18,3.06,3.14,3.4,3.23,3.19,3.27,3.26,3.24,3.11,3.19,3.04,2.98,3.32,3.39,3.4,3.2,3.0,3.2,3.4,3.41,3.2,3.19,2.93,2.92,3.06,3.18,3.13,3.2,3.03,2.99,3.1,3.13,3.37,3.11,3.03,3.21,2.99,3.2,3.18,3.2,3.05,3.3,3.2,3.28,3.02,3.18,3.05,3.18,3.26,3.26,3.26,3.26,3.19,3.19,3.16,3.26,3.22,3.22,3.22,3.74,3.24,3.22,3.2,3.14,3.22,3.2,3.24,3.03,3.15,2.99,3.22,3.45,3.03,3.22,3.41,3.06,3.16,3.27,3.18,3.09,3.09,3.27,3.13,3.16,3.06,3.16,3.19,3.08,3.16,3.19,3.26,3.08,3.08,3.26,2.99,3.1,3.38,3.1,3.38,3.19,3.18,3.37,3.13,3.42,3.17,3.36,3.36,3.24,3.25,3.14,3.24,3.18,3.12,3.18,2.93,3.12,3.18,3.24,3.26,3.8,3.31,3.08,3.09,3.09,3.09,3.29,3.08,3.11,3.4,3.39,3.31,3.31,3.31,3.17,3.05,3.17,3.12,3.11,3.31,3.22,3.2,3.22,3.07,3.13,3.22,3.07,3.19,3.19,3.22,3.2,3.3,3.26,3.13,3.34,3.03,3.03,3.2,3.44,2.99,3.17,3.34,3.44,3.31,3.23,3.19,3.31,2.91,3.44,2.99,3.5,3.22,3.06,3.18,3.16,3.23,3.38,3.38,3.17,3.22,3.12,3.17,3.21,3.28,3.16,3.23,3.21,3.1,3.14,3.18,3.29,3.2,3.2,3.1,3.15,3.1,3.5,3.16,3.02,3.03,3.04,3.08,3.57,3.15,3.25,3.51,3.24,3.25,3.24,3.11,3.15,3.57,3.18,3.57,3.36,3.51,3.15,3.05,3.14,3.15,3.09,3.65,3.23,3.24,3.09,3.21,2.97,3.37,3.18,2.93,2.99,3.2,3.23,3.12,3.15,3.13,3.31,3.04,2.95,3.19,3.16,3.23,3.33,3.15,3.58,3.37,3.23,2.99,3.31,3.4,3.27,3.27,3.31,3.31,3.1,3.2,3.31,3.24,3.23,3.22,3.27,3.27,3.03,3.03,3.03,3.22,3.2,3.06,3.19,3.01,3.46,3.13,3.08,3.05,3.1,3.3,2.98,2.98,3.05,3.22,3.3,3.14,3.08,3.3,2.95,3.3,3.1,3.19,3.19,3.21,3.11,3.17,3.19,3.21,3.33,3.36,3.36,3.21,3.1,3.08,3.37,3.08,3.08,3.29,3.14,2.8,3.01,3.37,2.84,3.07,3.22,3.02,3.08,3.77,3.55,3.04,3.04,2.93,3.11,2.93,3.11,3.12,3.04,3.06,3.07,3.18,2.96,2.96,2.99,3.15,3.03,3.28,3.15,3.07,3.11,3.11,3.11,3.15,3.22,3.45,3.29,3.11,3.11,3.11,3.03,3.11,3.02,3.07,3.11,3.11,3.11,3.29,3.15,3.16,3.08,3.22,3.45,3.36,2.94,3.16,3.2,3.14,3.05,3.07,2.99,3.05,3.09,3.02,2.99,3.02,3.34,3.06,3.07,3.05,3.76,2.99,3.1,3.2,3.12,3.12,3.22,3.37,3.15,3.15,3.13,3.42,3.26,3.02,3.14,3.2,3.25,3.26,2.95,3.12,3.09,3.19,3.11,3.11,2.98,3.53,2.98,2.98,3.09,3.2,3.18,3.16,3.13,3.17,2.9,3.19,3.19,3.08,3.19,2.95,3.18,2.95,3.17,3.16,3.08,3.08,3.1,2.92,3.25,3.28,3.11,3.05,3.17,2.96,3.32,2.9,3.19,3.46,3.25,3.22,3.02,3.25,3.14,2.94,3.06,3.22,3.12,3.02,3.16,2.85,2.85,3.23,3.25,3.36,2.97,2.91,3.11,3.17,3.16,3.15,3.0,3.02,3.07,3.03,3.4,3.1,3.19,3.12,3.11,3.24,3.24,3.25,3.19,3.08,3.09,3.16,3.12,3.35,3.46,3.11,3.06,3.08,3.17,3.69,3.2,3.17,3.11,3.24,3.19,3.18,3.26,3.5,3.23,3.05,3.18,3.26,3.22,3.16,3.5,3.23,3.23,3.23,3.2,3.23,3.2,3.38,3.23,3.03,3.25,3.27,3.18,2.87,3.18,3.08,3.4,3.15,2.87,3.18,3.08,3.06,3.24,3.25,3.21,3.05,3.06,3.02,2.94,2.97,2.99,3.0,3.02,2.94,3.3,3.1,3.0,3.24,2.93,3.25,3.24,3.14,3.21,3.06,3.24,3.11,3.15,3.32,3.06,2.93,3.25,3.26,3.14,2.97,2.96,2.97,3.18,3.14,2.96,3.22,2.97,3.33,3.11,3.15,3.09,3.53,3.11,3.13,3.04,3.25,3.01,3.34,3.19,2.97,3.13,3.0,3.27,2.93,3.1,3.01,3.04,3.22,3.11,3.34,3.11,3.12,3.48,2.96,2.98,3.14,3.18,3.26,3.22,3.11,3.18,3.09,3.1,3.18,3.1,3.31,3.1,3.19,3.09,3.18,3.04,3.18,3.18,3.06,3.08,3.06,3.3,3.03,3.1,3.1,3.1,3.1,3.1,3.1,3.21,3.1,3.22,3.34,3.42,3.11,3.21,3.32,3.31,3.1,3.28,3.08,3.32,3.45,3.14,3.23,3.23,3.31,3.06,3.1,3.13,3.07,2.93,2.91,3.07,3.06,3.07,2.93,3.14,3.08,3.17,3.14,2.91,3.38,3.14,3.14,3.17,3.34,3.0,3.08,3.17,3.13,3.27,3.29,3.04,3.29,2.9,3.2,3.16,3.22,3.54,3.08,3.1,3.23,3.09,3.16,3.24,3.19,3.5,3.06,3.29,3.48,3.14,3.16,3.12,3.15,3.43,3.3,3.02,3.11,3.08,3.23,3.18,3.05,3.0,3.0,3.0,3.17,3.08,3.32,3.08,3.18,3.0,3.0,3.13,3.12,3.15,3.17,3.34,3.08,3.22,2.96,3.02,3.31,3.18,3.19,3.17,2.96,3.02,3.05,3.34,3.08,3.22,3.14,2.98,2.97,3.08,3.13,3.05,3.08,2.97,3.47,2.98,3.32,3.25,3.13,3.0,3.16,3.01,3.28,3.1,3.28,3.38,3.25,3.06,3.16,3.01,2.95,3.13,3.0,2.99,2.98,2.93,3.2,3.2,3.1,3.19,3.39,3.25,3.12,2.94,3.12,2.87,3.21,3.19,3.25,3.39,3.12,3.37,3.15,3.05,3.11,2.95,3.15,3.39,3.1,3.16,3.1,3.39,3.01,3.24,2.98,3.35,3.36,3.34,3.34,3.33,3.36,3.35,3.34,3.34,3.24,3.05,2.95,3.25,3.1,3.22,3.11,3.22,3.16,3.18,3.1,3.24,3.11,3.19,3.15,3.12,3.29,3.19,2.93,2.93,3.23,3.25,3.26,2.9,3.06,3.41,3.36,2.99,2.98,3.04,3.24,3.26,3.12,3.25,3.24,3.04,3.23,2.99,3.04,2.98,3.3,3.2,3.05,3.31,3.04,3.05,3.31,3.22,3.2,3.26,3.22,3.06,3.04,3.11,3.07,3.05,3.03,3.04,3.05,3.09,3.19,3.19,3.34,3.14,3.3,3.29,3.38,3.31,3.19,3.34,3.14,3.18,3.33,3.38,3.36,3.19,3.14,3.17,2.98,3.18,3.49,2.99,2.93,3.08,3.25,3.08,3.19,3.23,3.05,3.31,3.2,3.05,3.37,3.37,3.01,3.11,3.09,3.26,3.14,3.15,3.1,3.14,3.14,3.15,3.1,3.23,3.17,3.03,2.98,3.16,3.2,3.41,3.41,3.1,3.2,3.1,3.22,3.41,3.04,3.24,3.24,3.24,2.92,3.06,3.66,2.92,3.24,3.01,3.11,2.86,3.01,2.86,3.11,2.99,3.0,3.12,3.07,2.99,3.12,3.32,3.0,3.15,3.18,3.15,3.14,3.04,3.1,2.94,2.92,3.14,3.3,3.26,2.94,3.16,3.35,2.85,2.85,2.85,3.18,3.31,3.35,3.35,3.12,3.12,3.0,3.18,3.59,3.3,3.2,3.35,3.35,3.15,2.93,3.04,3.11,3.27,2.91,2.91,3.04,3.27,3.27,2.91,3.11,2.96,3.0,3.21,3.04,3.06,3.07,3.04,2.96,3.06,3.19,3.0,3.21,3.24,3.24,3.24,3.06,3.06,3.2,3.06,3.08,3.29,3.25,3.12,3.24,3.12,3.12,3.16,3.16,3.12,3.12,3.16,2.97,2.9,2.9,3.26,2.92,3.13,3.27,3.13,3.42,3.11,3.16,3.03,3.33,3.2,3.16,3.5,3.42,3.16,3.27,3.2,3.02,3.16,3.07,3.41,3.14,3.03,2.96,3.31,3.32,3.25,3.31,3.28,3.1,3.04,3.24,3.06,3.11,3.24,3.13,3.24,3.09,3.15,3.32,3.06,3.3,2.98,3.04,3.13,3.1,3.17,3.11,3.24,3.06,3.09,3.1,3.06,3.05,3.05,3.05,3.05,2.96,3.23,2.86,3.12,3.3,3.05,3.09,3.12,2.83,3.47,3.04,3.11,3.06,3.18,3.35,3.11,3.11,3.36,3.37,3.17,3.38,3.36,3.36,3.28,3.11,3.08,3.28,3.21,3.39,3.19,3.22,2.97,3.32,2.96,2.96,2.96,2.96,2.96,2.96,2.96,3.02,2.89,3.3,3.43,2.96,3.28,3.29,3.29,3.39,2.99,3.28,3.29,3.29,2.99,2.99,3.16,2.79,3.03,3.39,3.08,3.08,3.08,3.17,3.08,3.03,3.14,3.17,3.26,3.31,3.24,3.11,3.24,3.42,3.2,3.31,3.13,3.08,3.18,3.2,3.46,3.02,3.18,3.18,3.16,3.18,3.18,3.03,3.14,3.22,3.2,3.17,3.03,3.05,3.2,2.99,3.02,3.05,2.99,2.99,3.02,3.03,2.96,2.96,2.99,3.24,3.13,3.05,3.2,3.22,3.28,3.12,3.24,3.38,3.38,3.0,3.03,3.17,3.19,3.05,3.26,3.38,3.22,3.24,3.15,3.46,2.83,2.83,3.15,3.14,3.16,3.0,3.0,3.14,3.16,3.14,2.96,2.97,3.2,3.14,3.26,3.34,3.26,3.17,3.23,3.34,3.41,3.36,3.4,3.55,3.21,3.36,3.46,3.27,3.12,3.12,3.1,3.16,3.16,3.25,3.24,3.1,3.12,3.08,3.1,3.16,3.16,3.06,2.91,3.13,3.29,3.2,3.15,3.18,3.12,3.1,3.1,3.15,3.06,3.1,3.13,3.06,3.13,3.1,3.16,2.99,3.15,3.18,3.01,3.24,3.26,3.23,2.99,3.07,3.18,3.01,3.32,2.95,3.1,3.21,3.25,3.25,3.09,3.23,3.23,3.17,2.93,3.25,3.17,3.23,3.21,3.17,3.18,3.12,3.0,3.04,3.14,3.09,2.95,2.95,2.83,3.19,3.15,3.18,3.18,3.03,3.14,3.22,2.96,3.28,3.08,3.44,3.17,2.88,3.21,3.16,3.24,3.18,2.99,3.22,3.21,3.32,3.31,3.32,3.16,3.24,3.14,2.88,3.13,3.14,2.88,3.24,3.11,3.26,3.26,3.14,2.91,3.17,3.39,2.97,3.1,3.26,3.16,3.16,3.03,3.08,3.03,3.06,3.16,3.16,3.19,3.15,3.09,3.26,3.25,3.21,3.05,3.19,3.19,3.15,3.2,3.2,3.16,3.3,3.2,3.16,2.99,2.9,3.25,3.25,2.9,3.25,3.22,3.01,3.01,3.01,3.0,3.07,3.07,3.06,3.07,3.04,3.0,3.07,3.2,3.0,3.22,3.01,3.08,2.98,3.16,3.2,3.21,2.98,3.16,3.06,3.04,3.2,3.18,3.27,3.25,3.18,3.09,3.2,3.22,3.11,3.06,3.07,3.13,3.07,3.24,3.14,3.14,3.06,3.35,3.21,3.23,2.9,2.9,2.9,2.9,2.94,3.0,3.0,3.02,2.9,2.96,3.23,2.9,2.94,2.96,3.23,3.05,3.0,3.02,3.19,3.19,3.15,3.07,3.42,3.27,3.16,3.16,3.16,3.19,3.21,2.96,3.15,3.19,3.13,3.08,3.13,3.3,3.3,3.19,3.1,3.08,3.23,3.28,3.06,3.06,3.03,3.12,3.07,3.15,2.86,3.26,3.18,3.08,3.09,3.08,3.08,3.26,3.22,3.18,3.08,3.23,3.23,3.31,3.12,3.07,3.16,3.04,3.18,3.75,3.22,3.31,3.27,3.26,3.15,3.07,3.15,3.15,3.15,3.15,3.01,3.12,3.14,3.1,3.1,3.08,3.09,3.33,3.25,3.22,3.05,3.26,3.26,3.33,3.24,3.63,3.46,3.26,3.22,3.1,3.02,3.02,3.25,3.22,3.02,3.03,3.16,3.1,3.19,3.1,3.07,3.1,3.19,3.19,3.19,3.19,3.18,2.9,2.9,2.9,2.9,2.9,2.9,3.18,3.22,3.17,3.19,3.31,3.32,3.24,2.9,3.15,3.27,2.92,3.06,3.2,3.1,3.23,3.16,3.2,3.09,2.96,3.13,3.31,3.26,3.2,3.06,3.19,3.32,3.07,3.2,3.09,3.12,2.98,3.12,2.94,3.24,3.18,2.94,2.98,3.03,3.05,3.29,3.3,3.06,3.05,3.24,3.34,3.25,3.29,3.08,3.04,3.24,3.14,3.05,3.05,3.05,3.07,2.92,3.05,3.22,3.26,3.07,3.51,3.29,3.31,3.25,3.44,3.11,2.97,2.94,3.14,3.07,3.23,3.24,3.14,3.14,3.05,3.14,3.27,3.08,3.1,3.13,3.16,3.04,3.04,3.07,3.09,3.25,3.19,3.2,3.3,3.2,3.48,3.15,3.15,3.15,2.96,2.96,3.75,3.22,3.32,3.26,3.26,3.23,3.22,3.32,3.31,3.17,3.11,3.07,3.08,3.22,3.22,3.22,3.22,3.56,3.08,3.07,3.23,3.22,3.3,3.3,3.15,3.15,3.15,3.15,3.08,2.88,2.87,3.3,3.25,3.17,3.25,3.1,3.25,3.17,3.13,3.44,3.1,3.1,3.01,3.05,3.16,3.39,3.38,3.22,3.38,3.33,3.36,3.17,3.12,3.16,3.32,3.2,3.12,3.13,3.0,3.2,3.12,3.16,3.0,3.04,2.89,3.4,3.12,3.11,3.12,3.23,3.12,3.12,3.11,2.94,2.94,2.94,2.94,2.94,2.94,2.94,3.23,2.94,3.04,3.44,3.37,2.96,3.11,2.96,3.03,2.98,2.96,2.82,3.22,3.18,3.11,3.27,3.22,3.25,3.31,3.18,3.17,3.18,3.22,3.12,3.14,2.99,2.86,3.26,3.14,2.98,2.99,3.02,3.18,3.05,3.14,3.16,3.22,3.02,3.21,2.94,3.02,3.31,3.22,3.2,3.21,3.23,3.23,3.28,3.11,3.08,3.05,3.14,3.25,3.14,3.25,3.26,3.1,3.11,3.11,3.11,3.1,3.11,3.02,3.17,3.19,3.21,3.21,3.17,2.92,3.21,3.17,3.11,3.23,3.04,3.23,3.04,3.08,3.11,3.19,3.08,3.08,3.08,3.08,3.19,3.19,3.08,3.22,3.22,3.11,3.2,3.27,2.96,3.21,3.15,3.21,3.25,3.24,3.36,3.24,3.22,3.09,3.06,3.16,3.06,3.09,3.39,3.39,3.48,3.04,3.18,3.23,3.05,3.22,3.24,3.04,3.0,3.14,3.14,3.14,3.24,3.27,3.0,3.27,3.23,3.12,3.11,3.11,3.36,3.2,3.24,3.03,3.76,3.36,3.18,3.11,3.2,3.26,3.11,3.14,3.14,3.24,3.1,3.14,3.18,3.23,3.24,3.29,3.16,3.47,3.13,3.13,3.2,2.97,3.08,3.36,3.04,3.18,3.04,3.1,3.09,3.27,3.2,3.35,3.14,3.26,3.03,3.15,3.22,3.4,3.2,3.07,3.24,3.36,3.36,3.12,3.19,3.06,3.16,3.0,3.14,3.32,3.19,3.17,3.14,3.12,3.16,3.32,3.32,3.0,3.03,3.06,3.06,3.06,3.32,3.14,3.13,3.06,3.06,3.18,2.99,3.13,3.26,3.36,3.05,3.05,3.26,3.19,2.96,3.35,3.39,3.05,3.1,3.11,3.22,3.26,3.36,3.09,3.26,3.17,3.38,3.34,3.33,3.11,3.49,3.4,3.16,3.66,3.03,3.66,3.23,3.18,3.3,3.35,3.2,3.1,3.08,3.34,3.19,3.21,3.42,2.99,2.97,3.46,3.1,2.86,3.02,3.41,3.28,3.12,3.26,3.28,3.22,3.01,3.12,3.2,3.32,3.07,3.22,3.15,3.2,3.3,3.0,2.8,3.06,3.18,3.11,3.16,3.04,3.12,2.9,3.14,3.22,3.25,3.16,3.15,2.9,3.26,3.01,3.36,3.26,3.22,3.07,3.22,3.26,3.36,3.26,3.05,3.39,3.18,3.18,3.04,3.23,3.22,3.39,3.23,3.11,3.25,3.28,3.04,3.28,3.26,3.04,3.01,3.37,3.24,3.09,3.32,3.29,3.36,3.11,3.44,3.44,3.26,3.24,3.1,3.09,3.09,3.09,3.09,3.21,2.87,3.27,3.09,3.14,3.32,3.32,3.14,3.17,3.32,3.32,3.46,3.08,3.47,3.47,3.28,3.35,3.29,3.18,3.28,3.08,3.47,3.17,3.29,3.11,3.06,3.44,3.23,3.17,2.88,2.88,2.88,2.88,2.93,3.38,2.88,2.93,3.13,3.19,3.13,3.04,3.1,3.1,3.26,3.26,3.33,3.2,3.36,3.03,3.4,3.28,3.35,3.3,3.4,3.36,3.25,3.03,3.29,3.12,3.31,3.24,3.29,3.11,3.34,3.06,3.18,3.34,3.04,3.49,3.06,3.12,3.27,3.24,3.34,3.34,3.55,3.33,3.22,3.22,3.25,3.36,3.33,3.24,3.24,3.23,3.32,3.67,3.44,2.86,3.23,3.12,3.13,3.32,3.14,3.23,3.43,3.16,3.12,3.18,3.18,2.98,3.16,3.16,3.12,3.47,3.31,3.24,3.56,3.27,3.3,3.16,3.16,3.16,3.16,3.16,3.24,3.16,3.32,3.13,3.16,2.97,3.1,3.15,3.14,3.04,3.04,3.02,3.01,3.46,3.57,3.02,3.15,3.13,3.04,3.53,3.19,3.18,3.17,3.17,3.31,3.16,3.11,3.31,3.17,3.36,3.18,3.24,3.23,2.93,2.91,3.19,3.21,3.42,3.32,3.35,3.1,3.18,3.2,2.91,3.2,3.24,3.18,3.1,3.19,3.18,3.2,3.23,3.48,3.48,3.1,3.23,3.1,3.23,3.27,3.24,3.49,3.36,3.47,3.11,3.03,3.38,3.52,3.28,3.44,3.17,3.21,3.28,3.18,3.29,3.41,3.05,3.1,3.05,3.1,3.3,3.32,3.1,2.9,2.9,3.08,3.12,3.03,3.04,3.23,3.31,3.2,3.3,3.06,3.29,3.27,3.31,3.19,3.15,3.37,3.14,3.33,3.49,3.12,3.36,3.25,3.24,3.15,3.15,3.07,3.26,3.27,3.14,3.15,3.21,3.04,3.04,3.07,3.06,3.24,3.29,3.27,3.15,2.99,3.34,3.26],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"pH\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"boxmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('5ae4ab33-d434-4a12-a9db-1e121964e7d3');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DPZhBuCNlgzM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Ds1nnrbElgu8"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Olá, este é o Colaboratory",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}